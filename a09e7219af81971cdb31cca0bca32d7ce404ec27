{
  "comments": [
    {
      "key": {
        "uuid": "6349737d_b11feb10",
        "filename": "repo/includes/EditEntity/EditStatCollectingEditFilterHookRunner.php",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 34
      },
      "writtenOn": "2018-09-25T03:37:26Z",
      "side": 1,
      "message": "Would recommend to avoid using nesting for this. Complicates call graphs, stack traces, and does have overhead. While that might mean we avoid this for hot code, we\u0027re currently interested in measuring code that is quite hot. Overhead should be kept to a minimum for that, and where possible not change the stack itself.\n\nA few alternative ideas.\n\nStart and end:\n\n $id \u003d $this-\u003eprofiler-\u003estart( $type . \u0027.EditFilterHookRunner.run\u0027 );\n // ...\n $this-\u003eprofiler-\u003eendId( $id );\n\n\nScoped timer (automatic end):\n\n $scopedTimer \u003d $this-\u003eprofiler-\u003escopedStart( $type . \u0027.EditFilterHookRunner.run\u0027 );",
      "range": {
        "startLine": 38,
        "startChar": 2,
        "endLine": 43,
        "endChar": 4
      },
      "revId": "a09e7219af81971cdb31cca0bca32d7ce404ec27",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "057e00e2_ace1f077",
        "filename": "repo/includes/EditEntity/EditStatCollectingEditFilterHookRunner.php",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 44
      },
      "writtenOn": "2018-09-26T02:38:19Z",
      "side": 1,
      "message": "Thanks for the input.\n\nI considered these options (after seeing both used in MediaWiki) and decided to go with the anonymous function in this experiment.\n\nThe start and end approach has these downsides:\n* Implementation of the profiler is more complex\n* Less obvious a single thing is going on (more error prone when changing code)\n* You need to call end (and can thus forget)\n* The key needs to be given to both calls, requiring more scope or repetition\n\n\nThe scoped timer approach has these downsides:\n* Only works when you want the whole remaining of the scope to be included\n* Very easy to change what is measured without realizing when modifying what is in the scope (ie adding some stuff to the end of the function)\n\nI see how the callback approach makes stack traces more complicated, though this seems like a minor point to me. As for performance overhead... doing an extra function call should not make a difference. Plus the other approaches have their own (also negligible) performance impact. Am I wrong about the performance? These two downsides are to me less significant than the downsides of the other two approaches.",
      "parentUuid": "6349737d_b11feb10",
      "range": {
        "startLine": 38,
        "startChar": 2,
        "endLine": 43,
        "endChar": 4
      },
      "revId": "a09e7219af81971cdb31cca0bca32d7ce404ec27",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}