{
  "comments": [
    {
      "key": {
        "uuid": "49541908_19f23fce",
        "filename": "repo/includes/ParserOutput/DispatchingEntityMetaTagsFactory.php",
        "patchSetId": 15
      },
      "lineNbr": 15,
      "author": {
        "id": 44
      },
      "writtenOn": "2018-08-20T13:10:33Z",
      "side": 1,
      "message": "What about making this a Decorator instead of a Factory?",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0fb78358_4aef985b",
        "filename": "repo/includes/ParserOutput/DispatchingEntityMetaTagsFactory.php",
        "patchSetId": 15
      },
      "lineNbr": 15,
      "author": {
        "id": 1620
      },
      "writtenOn": "2018-08-20T13:47:38Z",
      "side": 1,
      "message": "If this were a decorator what would it decorate? Would it be an EntityParserOutputGenerator Decorator?",
      "parentUuid": "49541908_19f23fce",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e74509b1_de0ce58b",
        "filename": "repo/includes/ParserOutput/DispatchingEntityMetaTagsFactory.php",
        "patchSetId": 15
      },
      "lineNbr": 15,
      "author": {
        "id": 44
      },
      "writtenOn": "2018-08-21T12:10:25Z",
      "side": 1,
      "message": "Decorator for EntityMetaTags",
      "parentUuid": "0fb78358_4aef985b",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "243cdb03_911d7680",
        "filename": "repo/tests/phpunit/includes/ParserOutput/DispatchingEntityMetaTagsFactoryTest.php",
        "patchSetId": 15
      },
      "lineNbr": 30,
      "author": {
        "id": 44
      },
      "writtenOn": "2018-08-20T13:10:33Z",
      "side": 1,
      "message": "You can remove the need for the custom type check and the test for it by using this siganture:\n\n__construct( callable ...$entityMetaTagsFactoryCallbacks )\n\nConstructor implementation remains the same. For callers you instead do \n\nnew MyClass( $arg1, $arg2 )\n\nor if you have an array you do\n\nnew MyClass( ...$list )\n\nOften the callers never have an array and are just creating one because of the signature, so it can simplify code there as well.",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "011982d5_7a5db4ac",
        "filename": "repo/tests/phpunit/includes/ParserOutput/DispatchingEntityMetaTagsFactoryTest.php",
        "patchSetId": 15
      },
      "lineNbr": 30,
      "author": {
        "id": 1620
      },
      "writtenOn": "2018-08-20T16:39:42Z",
      "side": 1,
      "message": "As far as I can tell this isn\u0027t possible. The callback array is keyed by the string representing the type of entity that callback will be used for. Argument unpacking seems to only be possible for non-string keyed arrays. See https://wiki.php.net/rfc/argument_unpacking#string_keys\n\nHave I missed something?",
      "parentUuid": "243cdb03_911d7680",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29caa929_0c6d4bdf",
        "filename": "repo/tests/phpunit/includes/ParserOutput/DispatchingEntityMetaTagsFactoryTest.php",
        "patchSetId": 15
      },
      "lineNbr": 30,
      "author": {
        "id": 44
      },
      "writtenOn": "2018-08-21T12:10:25Z",
      "side": 1,
      "message": "No, it was me that missed the presence of string keys somehow. I can be quite blind at times :)",
      "parentUuid": "011982d5_7a5db4ac",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ad372ee_e9c3d552",
        "filename": "repo/tests/phpunit/includes/ParserOutput/DispatchingEntityMetaTagsFactoryTest.php",
        "patchSetId": 15
      },
      "lineNbr": 42,
      "author": {
        "id": 44
      },
      "writtenOn": "2018-08-20T13:10:33Z",
      "side": 1,
      "message": "It is good form to (in most cases) put the method definition right below its first caller. Now I needed to go look for it through the whole class.",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6566c52e_5d6f3a5c",
        "filename": "repo/tests/phpunit/includes/ParserOutput/DispatchingEntityMetaTagsFactoryTest.php",
        "patchSetId": 15
      },
      "lineNbr": 42,
      "author": {
        "id": 1620
      },
      "writtenOn": "2018-08-21T07:51:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7ad372ee_e9c3d552",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "271069a3_ab821824",
        "filename": "repo/tests/phpunit/includes/ParserOutput/DispatchingEntityMetaTagsFactoryTest.php",
        "patchSetId": 15
      },
      "lineNbr": 48,
      "author": {
        "id": 44
      },
      "writtenOn": "2018-08-20T13:10:33Z",
      "side": 1,
      "message": "Using $this-\u003eexpectException() instead of the docblock thing allows you to be more precise about which code should throw the exception. I assume the call to newEntityMetaTags should be throwing the exception here, though that is not entirely obvious from the test (even if it is implied by the last statement otherwise being dead code). What\u0027s more, the test will pass if the constructor ends up throwing the exception. This issue increases in severity with the size of the test method.",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2cc378ab_cf6bb180",
        "filename": "repo/tests/phpunit/includes/ParserOutput/DispatchingEntityMetaTagsFactoryTest.php",
        "patchSetId": 15
      },
      "lineNbr": 48,
      "author": {
        "id": 1620
      },
      "writtenOn": "2018-08-21T07:51:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "271069a3_ab821824",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "73877d08_69a44fdc",
        "filename": "repo/tests/phpunit/includes/ParserOutput/DispatchingEntityMetaTagsFactoryTest.php",
        "patchSetId": 15
      },
      "lineNbr": 73,
      "author": {
        "id": 44
      },
      "writtenOn": "2018-08-20T13:10:33Z",
      "side": 1,
      "message": ") {\n\nnot\n\n)\n{",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "541dcbf9_cdb741a4",
        "filename": "repo/tests/phpunit/includes/ParserOutput/DispatchingEntityMetaTagsFactoryTest.php",
        "patchSetId": 15
      },
      "lineNbr": 73,
      "author": {
        "id": 1620
      },
      "writtenOn": "2018-08-21T07:51:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "73877d08_69a44fdc",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e06adb92_ee0f164b",
        "filename": "repo/tests/phpunit/includes/ParserOutput/DispatchingEntityMetaTagsFactoryTest.php",
        "patchSetId": 15
      },
      "lineNbr": 90,
      "author": {
        "id": 44
      },
      "writtenOn": "2018-08-20T13:10:33Z",
      "side": 1,
      "message": "createMock",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a18a46e_91bcb226",
        "filename": "repo/tests/phpunit/includes/ParserOutput/DispatchingEntityMetaTagsFactoryTest.php",
        "patchSetId": 15
      },
      "lineNbr": 90,
      "author": {
        "id": 1620
      },
      "writtenOn": "2018-08-21T07:51:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e06adb92_ee0f164b",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff91ca99_5238b9f8",
        "filename": "repo/tests/phpunit/includes/ParserOutput/MockEntityMetaTags.php",
        "patchSetId": 15
      },
      "lineNbr": 11,
      "author": {
        "id": 44
      },
      "writtenOn": "2018-08-20T13:10:33Z",
      "side": 1,
      "message": "StubEntityMetaTags seems like a better name. (Though of course EntityMetaTags itself has an issue)\n\nSee here for test double naming: https://www.entropywins.wtf/blog/2016/05/13/5-ways-to-write-better-mocks/",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce715427_aaa7bc9c",
        "filename": "repo/tests/phpunit/includes/ParserOutput/MockEntityMetaTags.php",
        "patchSetId": 15
      },
      "lineNbr": 11,
      "author": {
        "id": 1620
      },
      "writtenOn": "2018-08-21T07:51:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ff91ca99_5238b9f8",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56dec998_fb6f5ca3",
        "filename": "repo/tests/phpunit/includes/ParserOutput/MockEntityMetaTags.php",
        "patchSetId": 15
      },
      "lineNbr": 14,
      "author": {
        "id": 44
      },
      "writtenOn": "2018-08-20T13:10:33Z",
      "side": 1,
      "message": "huh?\n\nEdit: I see, this is to store the LanguageFallbackChain passed in the only test using this. Why not just take a LanguageFallbackChain in the constructor then? At least, if there was a need to take this thing at all, which to me it looks like it is not. You are using assertSame, which already guarantees you have the same instance of the class.",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd100c43_6c3c40a0",
        "filename": "repo/tests/phpunit/includes/ParserOutput/MockEntityMetaTags.php",
        "patchSetId": 15
      },
      "lineNbr": 14,
      "author": {
        "id": 1620
      },
      "writtenOn": "2018-08-21T07:51:45Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "56dec998_fb6f5ca3",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "70b7f694_13ffd345",
        "filename": "repo/tests/phpunit/includes/ParserOutput/MockEntityMetaTags.php",
        "patchSetId": 15
      },
      "lineNbr": 18,
      "author": {
        "id": 44
      },
      "writtenOn": "2018-08-20T13:10:33Z",
      "side": 1,
      "message": "return [];\n\nElse this is going to break when switching to real PHP 7 and using return type hints.\n\nAnd on a more abstract level it does violate Liskov Substituion, which is good to avoid in general, even if nothing explodes right away.",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21e58f39_8dce98ce",
        "filename": "repo/tests/phpunit/includes/ParserOutput/MockEntityMetaTags.php",
        "patchSetId": 15
      },
      "lineNbr": 18,
      "author": {
        "id": 1620
      },
      "writtenOn": "2018-08-21T07:51:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "70b7f694_13ffd345",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b3433f50_e53b7c9d",
        "filename": "view/src/EntityMetaTags.php",
        "patchSetId": 15
      },
      "lineNbr": 11,
      "author": {
        "id": 44
      },
      "writtenOn": "2018-08-20T12:28:56Z",
      "side": 1,
      "message": "EntityMetaTagCreator is a better name. Else it sounds like this is a value object instead of a service. Also, no need for the fully qualified name in the comment.",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d52e5f00_1dd03c47",
        "filename": "view/src/EntityMetaTags.php",
        "patchSetId": 15
      },
      "lineNbr": 11,
      "author": {
        "id": 1620
      },
      "writtenOn": "2018-08-21T07:51:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b3433f50_e53b7c9d",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10b1b72c_957bba65",
        "filename": "view/src/EntityMetaTags.php",
        "patchSetId": 15
      },
      "lineNbr": 12,
      "author": {
        "id": 44
      },
      "writtenOn": "2018-08-20T12:28:56Z",
      "side": 1,
      "message": "Is this \"meta tags\" an existing concept? I don\u0027t recognize it.\n\nIf it is not, or it has the same meaning as \"terms\", then I would stick with that more established terminology.",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b4789a9_50149bb6",
        "filename": "view/src/EntityMetaTags.php",
        "patchSetId": 15
      },
      "lineNbr": 12,
      "author": {
        "id": 1620
      },
      "writtenOn": "2018-08-20T13:47:38Z",
      "side": 1,
      "message": "The existing concept can be found in EntityParserOutputGenerator See getMetaTags and getParserOutput",
      "parentUuid": "10b1b72c_957bba65",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0846c1ac_8ff208c2",
        "filename": "view/src/EntityMetaTags.php",
        "patchSetId": 15
      },
      "lineNbr": 12,
      "author": {
        "id": 1620
      },
      "writtenOn": "2018-08-21T08:27:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5b4789a9_50149bb6",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6953c839_9b851ad9",
        "filename": "view/src/EntityMetaTags.php",
        "patchSetId": 15
      },
      "lineNbr": 14,
      "author": {
        "id": 44
      },
      "writtenOn": "2018-08-20T13:10:33Z",
      "side": 1,
      "message": "Should have a return type hint. Probably also good to describe the format of the arrays (which keys they have)",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3d4c2eb_5616689e",
        "filename": "view/src/EntityMetaTags.php",
        "patchSetId": 15
      },
      "lineNbr": 14,
      "author": {
        "id": 1620
      },
      "writtenOn": "2018-08-21T07:51:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6953c839_9b851ad9",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1856fa2a_600d50aa",
        "filename": "view/src/FingerprintableEntityMetaTags.php",
        "patchSetId": 15
      },
      "lineNbr": 36,
      "author": {
        "id": 44
      },
      "writtenOn": "2018-08-20T12:28:56Z",
      "side": 1,
      "message": "This caused me to look up the signature of extractPreferredValue, since I wondered if this can be something that is not an array or if the check is superfluous. I\u0027d go for a $preferred !\u003d\u003d null check instead as that makes it easier to read. Then again you can make an argument that is_array is \"safer\".",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6df33ea7_9f0ba488",
        "filename": "view/src/FingerprintableEntityMetaTags.php",
        "patchSetId": 15
      },
      "lineNbr": 49,
      "author": {
        "id": 44
      },
      "writtenOn": "2018-08-20T12:28:56Z",
      "side": 1,
      "message": "Private unless there is a good reason to expose the method. \"we might need it\" is not a good reason.",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e10802a1_bfd8f8c4",
        "filename": "view/src/FingerprintableEntityMetaTags.php",
        "patchSetId": 15
      },
      "lineNbr": 49,
      "author": {
        "id": 1620
      },
      "writtenOn": "2018-08-21T07:51:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6df33ea7_9f0ba488",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ef60db1_31dd2acd",
        "filename": "view/src/FingerprintableEntityMetaTags.php",
        "patchSetId": 15
      },
      "lineNbr": 56,
      "author": {
        "id": 44
      },
      "writtenOn": "2018-08-20T12:28:56Z",
      "side": 1,
      "message": "Assuming that $preferred[\u0027value\u0027] is always a string, it is better to use a guard clause here.\n\nif ( is_array( $preferred ) ) {\n     return $preferred[\u0027value\u0027];\n}\n\nmore if stuff {\n    return $entityId-\u003egetSerialization();\n}\n\nreturn null;\n\nMuch easier to understand, less state and less mutations.",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63dce857_f94fe814",
        "filename": "view/src/FingerprintableEntityMetaTags.php",
        "patchSetId": 15
      },
      "lineNbr": 56,
      "author": {
        "id": 1620
      },
      "writtenOn": "2018-08-21T07:51:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5ef60db1_31dd2acd",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f55cec94_294bd472",
        "filename": "view/tests/phpunit/EntityMetaTagsTestCase.php",
        "patchSetId": 15
      },
      "lineNbr": 12,
      "author": {
        "id": 44
      },
      "writtenOn": "2018-08-20T12:36:36Z",
      "side": 1,
      "message": "\\Wikibase\\View\\EntityMetaTags\n\nNot all tools understand it if you omit the first backslash",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2591f9c_d35ad991",
        "filename": "view/tests/phpunit/EntityMetaTagsTestCase.php",
        "patchSetId": 15
      },
      "lineNbr": 12,
      "author": {
        "id": 1620
      },
      "writtenOn": "2018-08-20T13:47:38Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f55cec94_294bd472",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7257311b_ed48405f",
        "filename": "view/tests/phpunit/EntityMetaTagsTestCase.php",
        "patchSetId": 15
      },
      "lineNbr": 27,
      "author": {
        "id": 44
      },
      "writtenOn": "2018-08-20T12:36:36Z",
      "side": 1,
      "message": "I\u0027ve actually never seen use of a data provider in an abstract class where it is defined by subclasses. I would expect the method to be defined as an abstract method here though. Or does that for some reason confuse PHPUnit?\n\nWhat made you create this abstract class anyway? There is only one subclass. Looks like this was added to avoid possible code duplication in the future. That is IMO premature, and beware that inheritance is typically a very bad way to share code, as it introduces very high coupling. Also beware the fallacy of DRY https://www.entropywins.wtf/blog/2017/09/06/the-fallacy-of-dry/",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "816eae58_3b6696b7",
        "filename": "view/tests/phpunit/EntityMetaTagsTestCase.php",
        "patchSetId": 15
      },
      "lineNbr": 27,
      "author": {
        "id": 44
      },
      "writtenOn": "2018-08-20T13:10:33Z",
      "side": 1,
      "message": "If the intention is to use this in the Lexeme extension then I\u0027m even more concerned: inheritance of concrete code across package boundaries is problematic. And in this case it would require having the test code autoloaded when the tests of the dependent package run, which is something that normally is not the case. (Then again this is MediaWiki so \"normally\" tends to not apply)",
      "parentUuid": "7257311b_ed48405f",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8734e0c8_ed5302c5",
        "filename": "view/tests/phpunit/EntityMetaTagsTestCase.php",
        "patchSetId": 15
      },
      "lineNbr": 27,
      "author": {
        "id": 1620
      },
      "writtenOn": "2018-08-20T13:47:38Z",
      "side": 1,
      "message": "\u003e I would expect the method to be defined as an abstract method here though\n\nDo you mean the data provider or the test itself?\n\n\u003e beware the fallacy of DRY\n\nThis could definitely be duplicated in Lexeme rather than relying on the abstract TestCase.",
      "parentUuid": "816eae58_3b6696b7",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90c9e7c1_7da8b029",
        "filename": "view/tests/phpunit/EntityMetaTagsTestCase.php",
        "patchSetId": 15
      },
      "lineNbr": 27,
      "author": {
        "id": 44
      },
      "writtenOn": "2018-08-21T12:10:25Z",
      "side": 1,
      "message": "I was talking about the data provider. This class now uses a method that is not defined in it. Normally the IDE would complain, but since the method reference is in a dockblock it does not.",
      "parentUuid": "8734e0c8_ed5302c5",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9201f70_82f72081",
        "filename": "view/tests/phpunit/FingerprintableEntityMetaTagsTest.php",
        "patchSetId": 15
      },
      "lineNbr": 24,
      "author": {
        "id": 44
      },
      "writtenOn": "2018-08-20T13:10:33Z",
      "side": 1,
      "message": "You can just do $mock \u003d $this-\u003ecreateMock( class )\n\nThe verbose version was needed in older version of PHPUnit but not anymore",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed682b72_3371b55b",
        "filename": "view/tests/phpunit/FingerprintableEntityMetaTagsTest.php",
        "patchSetId": 15
      },
      "lineNbr": 24,
      "author": {
        "id": 1620
      },
      "writtenOn": "2018-08-20T13:47:38Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e9201f70_82f72081",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a61cce9_4f82d306",
        "filename": "view/tests/phpunit/FingerprintableEntityMetaTagsTest.php",
        "patchSetId": 15
      },
      "lineNbr": 50,
      "author": {
        "id": 44
      },
      "writtenOn": "2018-08-20T12:36:36Z",
      "side": 1,
      "message": "https://www.entropywins.wtf/blog/2017/10/09/yield-in-phpunit-data-providers/\n\nyield \u0027good description of what is being tested\u0027 \u003d\u003e [\n    $fingerprintableEntityMetaTags,\n    ...\n]",
      "revId": "24a193583b1ea9c517cad6d2543c4bd7aa5f6c56",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    }
  ]
}