{
  "comments": [
    {
      "key": {
        "uuid": "18a1670c_3140aeb7",
        "filename": "client/data-bridge/.eslintrc.js",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 6546
      },
      "writtenOn": "2019-06-26T11:34:22Z",
      "side": 1,
      "message": "Are we sure we want types to be exclusively all caps, without any way to separate words?",
      "range": {
        "startLine": 31,
        "startChar": 26,
        "endLine": 31,
        "endChar": 33
      },
      "revId": "1bbb25b8077c45519fbb62f98b59c8a7487f5902",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9dba4bfd_5e9663ba",
        "filename": "client/data-bridge/.eslintrc.js",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 5897
      },
      "writtenOn": "2019-06-26T11:46:13Z",
      "side": 1,
      "message": "This up for discussion...but I like to pitch the idea to have a pattern for this right from the beginning.",
      "parentUuid": "18a1670c_3140aeb7",
      "range": {
        "startLine": 31,
        "startChar": 26,
        "endLine": 31,
        "endChar": 33
      },
      "revId": "1bbb25b8077c45519fbb62f98b59c8a7487f5902",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37b4ce15_d457763e",
        "filename": "client/data-bridge/.eslintrc.js",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 5121
      },
      "writtenOn": "2019-06-26T12:07:37Z",
      "side": 1,
      "message": "The question is probably about shouting the TYPE.\nhttps://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/generic-type-naming.md#user-content-options has an example.",
      "parentUuid": "9dba4bfd_5e9663ba",
      "range": {
        "startLine": 31,
        "startChar": 26,
        "endLine": 31,
        "endChar": 33
      },
      "revId": "1bbb25b8077c45519fbb62f98b59c8a7487f5902",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85019daf_bec3513c",
        "filename": "client/data-bridge/.eslintrc.js",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 6546
      },
      "writtenOn": "2019-06-26T12:28:20Z",
      "side": 1,
      "message": "So, we will never have two-word \"variables\" there, only things like \"TYPE\" and \"KEY\" as in the example? Then thats ok, I guess. (otherwise I would suggest to either also allow an underscore or lowercase characters)",
      "parentUuid": "37b4ce15_d457763e",
      "range": {
        "startLine": 31,
        "startChar": 26,
        "endLine": 31,
        "endChar": 33
      },
      "revId": "1bbb25b8077c45519fbb62f98b59c8a7487f5902",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "173c882d_a981a11a",
        "filename": "client/data-bridge/.eslintrc.js",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 4699
      },
      "writtenOn": "2019-06-26T12:38:24Z",
      "side": 1,
      "message": "To clarify, because it wasn’t clear to me on initial reading: this rule is only for *generic* type names (type parameter names), for example:\n\n interface MyMap\u003cKEY, VALUE\u003e {\n     // ....\n }\n\nKEY and VALUE have to be all-uppercase, MyMap doesn’t.\n\nI think this is an interesting suggestion… it reminds me of manpages, where parameters are also in uppercase:\n\n\u003e  cat [OPTION]... [FILE]...\n\u003e\n\u003e Concatenate FILE(s) to standard output.\n\u003e\n\u003e With no FILE, or when FILE is -, read standard input.\n\nIs this the convention followed in termbox as well?",
      "parentUuid": "37b4ce15_d457763e",
      "range": {
        "startLine": 31,
        "startChar": 26,
        "endLine": 31,
        "endChar": 33
      },
      "revId": "1bbb25b8077c45519fbb62f98b59c8a7487f5902",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5441e226_93e94e5c",
        "filename": "client/data-bridge/.eslintrc.js",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 5897
      },
      "writtenOn": "2019-06-27T10:30:42Z",
      "side": 1,
      "message": "No there is no convention...so we can make one.",
      "parentUuid": "173c882d_a981a11a",
      "range": {
        "startLine": 31,
        "startChar": 26,
        "endLine": 31,
        "endChar": 33
      },
      "revId": "1bbb25b8077c45519fbb62f98b59c8a7487f5902",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77af9867_137f6a70",
        "filename": "client/data-bridge/.eslintrc.js",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 6546
      },
      "writtenOn": "2019-06-26T11:34:22Z",
      "side": 1,
      "message": "When would we need this?",
      "range": {
        "startLine": 42,
        "startChar": 52,
        "endLine": 42,
        "endChar": 75
      },
      "revId": "1bbb25b8077c45519fbb62f98b59c8a7487f5902",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94abbde4_3ebf1bad",
        "filename": "client/data-bridge/.eslintrc.js",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 5897
      },
      "writtenOn": "2019-06-26T11:46:13Z",
      "side": 1,
      "message": "Like we have to use the virtual DOM of Vue (in tests)",
      "parentUuid": "77af9867_137f6a70",
      "range": {
        "startLine": 42,
        "startChar": 52,
        "endLine": 42,
        "endChar": 75
      },
      "revId": "1bbb25b8077c45519fbb62f98b59c8a7487f5902",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba1daec7_fd927d0a",
        "filename": "client/data-bridge/.eslintrc.js",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 5121
      },
      "writtenOn": "2019-06-26T12:07:37Z",
      "side": 1,
      "message": "Allows us to maintain an argument even if it unused as long as it is prefixed by an underscore.\nTechnically it is of course superfluous in this situation but sometimes it feels nicer to leave in what is at our disposal: https://gerrit.wikimedia.org/r/plugins/gitiles/wikibase/termbox/+/master/src/client/data-access/EntityRepository.ts#16\nThere are also funny cases which may have only been a defect of the sniff at the time and are fixed in the mean time: https://gerrit.wikimedia.org/r/plugins/gitiles/wikibase/termbox/+/master/src/store/language/getters.ts#12",
      "parentUuid": "94abbde4_3ebf1bad",
      "range": {
        "startLine": 42,
        "startChar": 52,
        "endLine": 42,
        "endChar": 75
      },
      "revId": "1bbb25b8077c45519fbb62f98b59c8a7487f5902",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e76bb1e2_edfe4e24",
        "filename": "client/data-bridge/.eslintrc.js",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 6546
      },
      "writtenOn": "2019-06-26T12:28:20Z",
      "side": 1,
      "message": "I don\u0027t really get those examples, but it seems that there is a need for this. So it is fine from my side.",
      "parentUuid": "ba1daec7_fd927d0a",
      "range": {
        "startLine": 42,
        "startChar": 52,
        "endLine": 42,
        "endChar": 75
      },
      "revId": "1bbb25b8077c45519fbb62f98b59c8a7487f5902",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}