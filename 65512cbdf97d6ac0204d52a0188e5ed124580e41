{
  "comments": [
    {
      "key": {
        "uuid": "d7e6974b_f7bbf28a",
        "filename": "repo/includes/LinkedData/EntityDataRequestHandler.php",
        "patchSetId": 3
      },
      "lineNbr": 513,
      "author": {
        "id": 106
      },
      "writtenOn": "2019-03-27T10:09:31Z",
      "side": 1,
      "message": "This can still be 0 here.\n\nCaching the revision with a key of 0 is probably a bad idea.",
      "range": {
        "startLine": 513,
        "startChar": 35,
        "endLine": 513,
        "endChar": 44
      },
      "revId": "65512cbdf97d6ac0204d52a0188e5ed124580e41",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9ccac7a_96c24abd",
        "filename": "repo/includes/LinkedData/EntityDataRequestHandler.php",
        "patchSetId": 3
      },
      "lineNbr": 539,
      "author": {
        "id": 106
      },
      "writtenOn": "2019-03-27T10:09:31Z",
      "side": 1,
      "message": "It doesn\u0027t look like key is set in this context?\n----\nIf I am not mistaken using maxage in this way means that default behaviour now will mean that the cached value will always be retrieved, even if the entity has been updated, if no maxage is passed (which is not a requirement) as the default will be 31 days?\n\nat least when using simple requests like https://www.wikidata.org/wiki/Special:EntityData/Q3156846.ttl\n-----\nThere is no need to cache JSON responses here, the shared cache is already enough for that, also the request rate is much lower, we could think about adding more in the future.\nTTL vs JSON is noticeably slower when it comes to the return time from special:entitydata",
      "range": {
        "startLine": 539,
        "startChar": 23,
        "endLine": 539,
        "endChar": 27
      },
      "revId": "65512cbdf97d6ac0204d52a0188e5ed124580e41",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ccda65ce_cb416f9d",
        "filename": "repo/includes/LinkedData/EntityDataRequestHandler.php",
        "patchSetId": 3
      },
      "lineNbr": 539,
      "author": {
        "id": 2096
      },
      "writtenOn": "2019-03-27T16:04:31Z",
      "side": 1,
      "message": "If $this-\u003ecache is set, then $key will be set by the code above. \n\n\u003e the cached value will always be retrieved, even if the entity has been updated\n\nHow can you update a past revision? I thought it\u0027s not possible. \n\n\u003e There is no need to cache JSON responses here, the shared cache is already enough for that, also the request rate is much lower,\n\nIf the request rate is low, should we really bother to exclude JSON? It\u0027d complicate the code but have not much performance effect.",
      "parentUuid": "b9ccac7a_96c24abd",
      "range": {
        "startLine": 539,
        "startChar": 23,
        "endLine": 539,
        "endChar": 27
      },
      "revId": "65512cbdf97d6ac0204d52a0188e5ed124580e41",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b88530e_70d07a05",
        "filename": "repo/includes/Specials/SpecialEntityData.php",
        "patchSetId": 3
      },
      "lineNbr": 133,
      "author": {
        "id": 106
      },
      "writtenOn": "2019-03-27T10:09:31Z",
      "side": 1,
      "message": "This cache key will be split between hhvm and php7, and also split between mediawiki versions, so each week it will rotate.\n\nIn https://gerrit.wikimedia.org/r/#/c/mediawiki/extensions/Wikibase/+/498348/ I am introducing a sharedCacheKeyGroup options which is probably more like what we want to use here. to avoid the extra splits and rotations.",
      "range": {
        "startLine": 133,
        "startChar": 4,
        "endLine": 133,
        "endChar": 82
      },
      "revId": "65512cbdf97d6ac0204d52a0188e5ed124580e41",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}