{
  "comments": [
    {
      "key": {
        "uuid": "4e1dcb5b_983d99bb",
        "filename": "repo/tests/phpunit/includes/RepoHooksTest.php",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 44
      },
      "writtenOn": "2014-05-27T15:33:43Z",
      "side": 1,
      "message": "Well, this is a stub, not a mock",
      "revId": "ad64c633e34b24fd14d498704a6abc042bc3bf28",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e1dcb5b_b8105505",
        "filename": "repo/tests/phpunit/includes/RepoHooksTest.php",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 128
      },
      "writtenOn": "2014-05-27T15:55:50Z",
      "side": 1,
      "message": "I find that distinction highly technical, especially since we are dealing with an object generated by calling getMock(). Maybe that should be called getDouble(). In any case: it seems that the terminology is not used consistently anywhere, really. I guess we can do better, but since a double can well be a stub and a mock at the same time, and phpunit refers to such objects as \"mock\" in the API (though it makes a distinction in the documentation), I don\u0027t think we need to be very picky about this.",
      "parentUuid": "4e1dcb5b_983d99bb",
      "revId": "ad64c633e34b24fd14d498704a6abc042bc3bf28",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e1dcb5b_7f997c7f",
        "filename": "repo/tests/phpunit/includes/RepoHooksTest.php",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 44
      },
      "writtenOn": "2014-05-28T14:35:42Z",
      "side": 1,
      "message": "Mock and stub are well established terminology. Using the one instead of the other is misleading. We do not need to repeat the mistake of the PHPUnit API, or continue down that path as we have so far.\n\nThis change can be merged without changing it; it is just a distinction to hold in mind.\n\n\u003e Maybe that should be called getDouble()\n\nUsing the general term is not more clear, and in this case merely transforms the misdirection, since \"double\" is not the same as \"test double\".",
      "parentUuid": "4e1dcb5b_b8105505",
      "revId": "ad64c633e34b24fd14d498704a6abc042bc3bf28",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e1dcb5b_3844454a",
        "filename": "repo/tests/phpunit/includes/RepoHooksTest.php",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 44
      },
      "writtenOn": "2014-05-27T15:33:43Z",
      "side": 1,
      "message": "same here",
      "revId": "ad64c633e34b24fd14d498704a6abc042bc3bf28",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e1dcb5b_187189a7",
        "filename": "repo/tests/phpunit/includes/RepoHooksTest.php",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 44
      },
      "writtenOn": "2014-05-27T15:33:43Z",
      "side": 1,
      "message": "and here",
      "revId": "ad64c633e34b24fd14d498704a6abc042bc3bf28",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e1dcb5b_18a069f0",
        "filename": "repo/tests/phpunit/includes/RepoHooksTest.php",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 44
      },
      "writtenOn": "2014-05-27T15:33:43Z",
      "side": 1,
      "message": "Stubs that return stubs that return stubs is a testing anti-pattern. This code is hard to understand it is very brittle (it is tightly bound to the implementation, which is what stubbing is supposed to get rid of).",
      "revId": "ad64c633e34b24fd14d498704a6abc042bc3bf28",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e1dcb5b_38fc45b1",
        "filename": "repo/tests/phpunit/includes/RepoHooksTest.php",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 128
      },
      "writtenOn": "2014-05-27T15:55:50Z",
      "side": 1,
      "message": "Well, OutputPage is a kitchen sink object, especially since it contains an IContextSource. That sucks, but we can\u0027t easily change it. If we want to mock the output page, which seems like a good idea, I see no way around having such a complex mock (or stub or double or fake or whatever).",
      "parentUuid": "4e1dcb5b_18a069f0",
      "revId": "ad64c633e34b24fd14d498704a6abc042bc3bf28",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e1dcb5b_38bd65ae",
        "filename": "repo/tests/phpunit/includes/RepoHooksTest.php",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 33
      },
      "writtenOn": "2014-05-27T16:10:34Z",
      "side": 1,
      "message": "for this purpose, how about something like:\n\n$context \u003d new DerivativeContext( RequestContext::getMain() );   \n$ns \u003d NamespaceUtils::getEntityNamespace( \u0027wikibase-property\u0027 );                            \n$context-\u003esetTitle( Title::makeTitle( $ns, \u0027P3000\u0027 ) );\n$outputPage \u003d new OutputPage( $context );\n\nalthough it\u0027s nice to have stubs and mocks, I think not doing that here is ok and is more simple.",
      "parentUuid": "4e1dcb5b_38fc45b1",
      "revId": "ad64c633e34b24fd14d498704a6abc042bc3bf28",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}