{
  "comments": [
    {
      "key": {
        "uuid": "6dedbb2b_bf6174c1",
        "filename": "lib/includes/Store/Sql/Terms/DatabaseItemTermStore.php",
        "patchSetId": 3
      },
      "lineNbr": 103,
      "author": {
        "id": 50
      },
      "writtenOn": "2019-05-29T15:56:21Z",
      "side": 1,
      "message": "Shouldn\u0027t this (and the following) happen in a transaction… also FOR UPDATE?",
      "revId": "f452946c64299612720c39df5ebbf7c605eb1985",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dbb5e2bc_6198c8d7",
        "filename": "lib/includes/Store/Sql/Terms/DatabaseItemTermStore.php",
        "patchSetId": 3
      },
      "lineNbr": 103,
      "author": {
        "id": 4699
      },
      "writtenOn": "2019-05-29T16:05:42Z",
      "side": 1,
      "message": "Well, the whole thing should already happen in the web request transaction, no?\n\nI think I left out the FOR UPDATE (in the DatabasePropertyTermStore) because I figured that MediaWiki would already prevent concurrent edits of the same page, which should be the only case where we would try to store terms concurrently as well.\n\nIf any transaction or FOR UPDATE stuff is missing, then I’d prefer to add it in a follow-up, to both this class and DatabasePropertyTermStore (which is already merged).",
      "parentUuid": "6dedbb2b_bf6174c1",
      "revId": "f452946c64299612720c39df5ebbf7c605eb1985",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "524b23ca_fa6d1d54",
        "filename": "lib/includes/Store/Sql/Terms/DatabaseItemTermStore.php",
        "patchSetId": 3
      },
      "lineNbr": 103,
      "author": {
        "id": 50
      },
      "writtenOn": "2019-05-29T16:09:45Z",
      "side": 1,
      "message": "\u003e I think I left out the FOR UPDATE (in the DatabasePropertyTermStore) because I figured that MediaWiki would already prevent concurrent edits of the same page, which should be the only case where we would try to store terms concurrently as well.\n\nI\u0027m not sure about this… there might be maintenance scripts running this in the future, this also might run asynchronously in Jobs/ deferred updates (or just after the actual edit happened… which could open up two race conditions, if edits are done fast), thus it\u0027s not strictly ensured that just one instance will ever be active.",
      "parentUuid": "dbb5e2bc_6198c8d7",
      "revId": "f452946c64299612720c39df5ebbf7c605eb1985",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "822fa72c_c87572ba",
        "filename": "lib/includes/Store/Sql/Terms/DatabaseItemTermStore.php",
        "patchSetId": 3
      },
      "lineNbr": 103,
      "author": {
        "id": 4699
      },
      "writtenOn": "2019-05-29T16:18:53Z",
      "side": 1,
      "message": "If you think a FOR UPDATE is enough to guard against this, we can add it :) it probably is, but I haven’t convinced myself of it yet.\n\nI’m unsure about how/where the transactions should happen anyways. Currently we have one in the DatabaseTermIdsCleaner, but I suspect that’s incorrect, because the two SELECTs in cleanTermsIfUnused() (in this class) should probably be covered by the same transaction. So should DatabaseTermIdsCleaner rely on its caller to establish the transaction?\n\nHere it would probably work to begin a transaction just before we get $oldTermIds, and commit it… after the wbt_item_terms INSERT or after the wbt_item_terms DELETE? Not sure.",
      "parentUuid": "524b23ca_fa6d1d54",
      "revId": "f452946c64299612720c39df5ebbf7c605eb1985",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cba71ea9_43003f15",
        "filename": "lib/includes/Store/Sql/Terms/DatabaseItemTermStore.php",
        "patchSetId": 3
      },
      "lineNbr": 103,
      "author": {
        "id": 50
      },
      "writtenOn": "2019-05-31T08:28:31Z",
      "side": 1,
      "message": "\u003e If you think a FOR UPDATE is enough to guard against this, we can add it :) it probably is, but I haven’t convinced myself of it yet.\n\nAt a glance it sounds promising, so I\u0027m inclined to say yes.\n\n\u003e Here it would probably work to begin a transaction just before we get $oldTermIds, and commit it… after the wbt_item_terms INSERT or after the wbt_item_terms DELETE? Not sure.\n\nBefore the delete should be fine (because another instance would make sure with FOR UPDATE that any rows it assumes to exist actually do exist, thus can\u0027t be deleted from underneath it).\n\n\u003e I’m unsure about how/where the transactions should happen anyways. Currently we have one in the DatabaseTermIdsCleaner, but I suspect that’s incorrect, because the two SELECTs in cleanTermsIfUnused() (in this class) should probably be covered by the same transaction. So should DatabaseTermIdsCleaner rely on its caller to establish the transaction?\n\nYeah, they need to be in the same transaction together, but I guess they could be in a separate transaction from the storeTerms one (as they themselves check that rows are unused)",
      "parentUuid": "822fa72c_c87572ba",
      "revId": "f452946c64299612720c39df5ebbf7c605eb1985",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc888d82_578ff05d",
        "filename": "lib/includes/Store/Sql/Terms/DatabaseItemTermStore.php",
        "patchSetId": 3
      },
      "lineNbr": 103,
      "author": {
        "id": 6768
      },
      "writtenOn": "2019-05-31T10:00:06Z",
      "side": 1,
      "message": "should we move race-condition discussions and solutions into this change I86fc8bde882b4c56be9ea7fa27822fa01b63df09 (or another separate one)?\n\nsince race-conditions are happening across multiple concepts here (Acquirer, Cleaner), it would be better look at them together and solve the issue in one change after we have the implementations in-place already.",
      "parentUuid": "cba71ea9_43003f15",
      "revId": "f452946c64299612720c39df5ebbf7c605eb1985",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a4b40937_919f92ec",
        "filename": "lib/includes/Store/Sql/Terms/DatabaseItemTermStore.php",
        "patchSetId": 3
      },
      "lineNbr": 103,
      "author": {
        "id": 6768
      },
      "writtenOn": "2019-05-31T10:03:38Z",
      "side": 1,
      "message": "I mean to say, we tackle race-conditions in a separate thread not necessarily in one change alone ;)",
      "parentUuid": "dc888d82_578ff05d",
      "revId": "f452946c64299612720c39df5ebbf7c605eb1985",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bfeb9489_75e7acd1",
        "filename": "lib/includes/Store/Sql/Terms/DatabaseItemTermStore.php",
        "patchSetId": 3
      },
      "lineNbr": 103,
      "author": {
        "id": 4699
      },
      "writtenOn": "2019-06-03T11:06:50Z",
      "side": 1,
      "message": "\u003e Yeah, they need to be in the same transaction together, but I guess they could be in a separate transaction from the storeTerms one (as they themselves check that rows are unused)\n\nI think it definitely needs to be in a separate transaction, because we wanted to do it in a post-request update.\n\nThis also made me realize that the “implement post-request cleanup by injecting a deferring TermIdsCleaner into this class” idea isn’t going to work out if the cleanup needs to be part of a transaction that’s begun and committed in deleteTerms() :/\n\n\u003e I mean to say, we tackle race-conditions in a separate thread not necessarily in one change alone ;)\n\nI agree, let’s merge this change for now.",
      "parentUuid": "a4b40937_919f92ec",
      "revId": "f452946c64299612720c39df5ebbf7c605eb1985",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79730420_889105ae",
        "filename": "lib/includes/Store/Sql/Terms/DatabaseItemTermStore.php",
        "patchSetId": 3
      },
      "lineNbr": 169,
      "author": {
        "id": 50
      },
      "writtenOn": "2019-05-29T15:56:21Z",
      "side": 1,
      "message": "Not quite accurate",
      "revId": "f452946c64299612720c39df5ebbf7c605eb1985",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bbf2c0e8_781397b4",
        "filename": "lib/includes/Store/Sql/Terms/DatabaseItemTermStore.php",
        "patchSetId": 3
      },
      "lineNbr": 169,
      "author": {
        "id": 4699
      },
      "writtenOn": "2019-05-29T16:05:42Z",
      "side": 1,
      "message": "How so?",
      "parentUuid": "79730420_889105ae",
      "revId": "f452946c64299612720c39df5ebbf7c605eb1985",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0ec6e83_3a346b8c",
        "filename": "lib/includes/Store/Sql/Terms/DatabaseItemTermStore.php",
        "patchSetId": 3
      },
      "lineNbr": 169,
      "author": {
        "id": 50
      },
      "writtenOn": "2019-05-29T16:09:45Z",
      "side": 1,
      "message": "This already checks for both properties and items, while the comment claims it doesn\u0027t",
      "parentUuid": "bbf2c0e8_781397b4",
      "revId": "f452946c64299612720c39df5ebbf7c605eb1985",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c17a03f_aa7bc21e",
        "filename": "lib/includes/Store/Sql/Terms/DatabaseItemTermStore.php",
        "patchSetId": 3
      },
      "lineNbr": 169,
      "author": {
        "id": 4699
      },
      "writtenOn": "2019-05-29T16:11:17Z",
      "side": 1,
      "message": "Two lines above, the comment explains that it checks for use “by any other items or properties”. “Anywhere else” refers to other uses, e. g. by extensions.",
      "parentUuid": "b0ec6e83_3a346b8c",
      "revId": "f452946c64299612720c39df5ebbf7c605eb1985",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    }
  ]
}