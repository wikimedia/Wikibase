{
  "comments": [
    {
      "key": {
        "uuid": "ce3c5b53_fa13b003",
        "filename": "repo/includes/ChangeOp/Deserialization/ItemChangeOpDeserializer.php",
        "patchSetId": 14
      },
      "lineNbr": 38,
      "author": {
        "id": 4089
      },
      "writtenOn": "2017-02-23T18:15:59Z",
      "side": 1,
      "message": "Why not require all those little deserializers as constructor dependencies?",
      "range": {
        "startLine": 37,
        "startChar": 4,
        "endLine": 38,
        "endChar": 38
      },
      "revId": "b7dc378849078e24bc26a443d3d2f918e2e54d24",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce3c5b53_a7e2ec2c",
        "filename": "repo/includes/ChangeOp/Deserialization/ItemChangeOpDeserializer.php",
        "patchSetId": 14
      },
      "lineNbr": 38,
      "author": {
        "id": 1786
      },
      "writtenOn": "2017-02-24T11:32:21Z",
      "side": 1,
      "message": "It\u0027s quite a lot of little deserializers and PropertyChangeOpDeserializer also needs them so it felt like a better idea to have a factory instead of several classes with a lot of constructor arguments.",
      "parentUuid": "ce3c5b53_fa13b003",
      "range": {
        "startLine": 37,
        "startChar": 4,
        "endLine": 38,
        "endChar": 38
      },
      "revId": "b7dc378849078e24bc26a443d3d2f918e2e54d24",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce3c5b53_1a81b4fd",
        "filename": "repo/tests/phpunit/includes/ChangeOp/Deserialization/ItemChangeOpDeserializerTest.php",
        "patchSetId": 14
      },
      "lineNbr": 83,
      "author": {
        "id": 4089
      },
      "writtenOn": "2017-02-23T18:15:59Z",
      "side": 1,
      "message": "IMO, test is hard to understand and feels super-magic because of dynamic passing of method names.\n\nIt also doesn\u0027t test return value of `createEntityChangeOp` which is, as I see it, what should be tested but not calls to the factory.\n\nCan you please create separate test for each case?",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 83,
        "endChar": 2
      },
      "revId": "b7dc378849078e24bc26a443d3d2f918e2e54d24",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce3c5b53_ac9ad373",
        "filename": "repo/tests/phpunit/includes/ChangeOp/Deserialization/ItemChangeOpDeserializerTest.php",
        "patchSetId": 14
      },
      "lineNbr": 83,
      "author": {
        "id": 2626
      },
      "writtenOn": "2017-02-24T08:18:06Z",
      "side": 1,
      "message": "\u003e It also doesn\u0027t test return value of `createEntityChangeOp` which\n \u003e is, as I see it, what should be tested but not calls to the\n \u003e factory.\n\nSo we\u0027ve been talking about this with Jakob and decided to take such shortcuts. As with other ChangeOpDeserializers, we don\u0027t want to test what exact ChangeOp instance this one here returns but we more what changes those ChangeOps actually have on the entity once applied.\nSo having and item in each test, and applying different kind of change requests on it would be the best we could do in those tests, we thought. But then we thought there are different combinations being tested in per-field ChangeOp class tests, similar ones in per-field ChangeOpDeserializer tests, and then tests of API\\EditEntity test even more variants and combinations. Therefore we were a bit lazy and thought it might be fine to take a shortcut and just check that right thing on the factory is called and tests for single bits give a guarantee all works as supposed.\n\nA very arguable argumentation, I know. And also the more I think of it, the more problematic this approach seems. We cannot really assume particular factory calls result in this or that ChangeOp. Also, unit tests of the factory do not test the actual effect of change ops (which I think is OK). That means those test here do not really verify what we want. Also, if we decided to change how Item\u0027s deserializer works internally (ie. decided to inject single deserializers not the factory) the whole suite test would be of no value. Given all that, I am sorry to say that but I tend to think we should have tests here as done for per-field deserializers: have a pre-configured, get a change op from the serialized change request, apply it on item, and then verify relevant parts of the item has changed as expected. What do you think Jakob?\n\nAlso, I second opinion it would be better to have a test method per test case. This is what I initially was doing for PropertyChangeOpDeserializer but then wrapped it in a single test with a test case provider to be consistent. Generally I think pulling too many things in provider methods makes tests less clear and more entangled, although it this case it seemed more or less fine.",
      "parentUuid": "ce3c5b53_1a81b4fd",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 83,
        "endChar": 2
      },
      "revId": "b7dc378849078e24bc26a443d3d2f918e2e54d24",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce3c5b53_475e80ed",
        "filename": "repo/tests/phpunit/includes/ChangeOp/Deserialization/ItemChangeOpDeserializerTest.php",
        "patchSetId": 14
      },
      "lineNbr": 83,
      "author": {
        "id": 1786
      },
      "writtenOn": "2017-02-24T11:32:21Z",
      "side": 1,
      "message": "I agree that checking factory method calls is not what we should be testing. I\u0027ll change it and use the same approach we used for the other deserializers - applying the returned ChangeOps to an Item. Aleksey and I talked about it briefly and came to the conclusion that the duplication is likely harmless and ItemChangeOpDeserializer is actually an good place to test the actual behavior since it\u0027s the service that is going to be used in EditEntity whereas the per-field services are only parts of it.\n\nRegarding the separate test for each method with no provider approach I don\u0027t quite agree. The test effectively has 4 lines of code and the provider has no logic in it. I would argue in this case the magic can be understood quicker than reading through 8 separate tests.\n(But this test is going to go away anyway.)",
      "parentUuid": "ce3c5b53_ac9ad373",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 83,
        "endChar": 2
      },
      "revId": "b7dc378849078e24bc26a443d3d2f918e2e54d24",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}