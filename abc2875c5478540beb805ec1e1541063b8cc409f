{
  "comments": [
    {
      "key": {
        "uuid": "ee33df1d_db0c46f3",
        "filename": "lib/includes/store/CachingPropertyOrderProvider.php",
        "patchSetId": 5
      },
      "lineNbr": 51,
      "author": {
        "id": 128
      },
      "writtenOn": "2016-03-22T15:58:04Z",
      "side": 1,
      "message": "Since we only cache one thing per wiki, we don\u0027t need a prefix here, but the full key. $this-\u003ecacheKey \u003d $cacheKey would do.",
      "revId": "abc2875c5478540beb805ec1e1541063b8cc409f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee33df1d_bb0fc2e3",
        "filename": "lib/includes/store/CachingPropertyOrderProvider.php",
        "patchSetId": 5
      },
      "lineNbr": 57,
      "author": {
        "id": 128
      },
      "writtenOn": "2016-03-22T15:58:04Z",
      "side": 1,
      "message": "Here we should first check if we already have the info in the cache, and use it if it\u0027s there:\n\n  $propertyOrder  \u003d $this-\u003ecache-\u003eget( $this-\u003ecacheKey );\n  if ( $propertyOrder !\u003d\u003d false ) {\n    return $propertyOrder;\n  }",
      "revId": "abc2875c5478540beb805ec1e1541063b8cc409f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee33df1d_7b37faab",
        "filename": "lib/includes/store/CachingPropertyOrderProvider.php",
        "patchSetId": 5
      },
      "lineNbr": 59,
      "author": {
        "id": 128
      },
      "writtenOn": "2016-03-22T15:58:04Z",
      "side": 1,
      "message": "We\u0027ll want to cache an empty list too. So the check has to be $propertyOrder !\u003d\u003d null. MAybe we even want to do negative caching, and also cache the null case. Then no check is needed.",
      "revId": "abc2875c5478540beb805ec1e1541063b8cc409f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee33df1d_db3e0687",
        "filename": "lib/includes/store/CachingPropertyOrderProvider.php",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 128
      },
      "writtenOn": "2016-03-22T15:58:04Z",
      "side": 1,
      "message": "We do need a cache key :)",
      "revId": "abc2875c5478540beb805ec1e1541063b8cc409f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee33df1d_3bfbb2bb",
        "filename": "lib/includes/store/MediaWikiPagePropertyOrderProvider.php",
        "patchSetId": 5
      },
      "lineNbr": 16,
      "author": {
        "id": 128
      },
      "writtenOn": "2016-03-22T15:58:04Z",
      "side": 1,
      "message": "We generally use \"WikiPageFooBar\", not \"MediaWikiPageFooBar\". It\u0027s safe to assume that anything that says \"wiki\" here will mean MediaWiki :)",
      "revId": "abc2875c5478540beb805ec1e1541063b8cc409f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee33df1d_1b1d0e15",
        "filename": "lib/includes/store/MediaWikiPagePropertyOrderProvider.php",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 128
      },
      "writtenOn": "2016-03-22T15:58:04Z",
      "side": 1,
      "message": "Should probably be a constructor argument.",
      "revId": "abc2875c5478540beb805ec1e1541063b8cc409f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee33df1d_9bbf5ecd",
        "filename": "lib/includes/store/MediaWikiPagePropertyOrderProvider.php",
        "patchSetId": 5
      },
      "lineNbr": 42,
      "author": {
        "id": 128
      },
      "writtenOn": "2016-03-22T15:58:04Z",
      "side": 1,
      "message": "That only happens if self::PAGENAME is syntactically invalid. That would indicate a serious bug. Not sure we need to explicitly check for this case.",
      "revId": "abc2875c5478540beb805ec1e1541063b8cc409f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee33df1d_bbe50209",
        "filename": "lib/includes/store/MediaWikiPagePropertyOrderProvider.php",
        "patchSetId": 5
      },
      "lineNbr": 45,
      "author": {
        "id": 128
      },
      "writtenOn": "2016-03-22T15:58:04Z",
      "side": 1,
      "message": "This can\u0027t happen, WikiPage::factory is guaranteed to return a WikiPage (or throw an exception)",
      "revId": "abc2875c5478540beb805ec1e1541063b8cc409f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee33df1d_3b76123a",
        "filename": "lib/includes/store/MediaWikiPagePropertyOrderProvider.php",
        "patchSetId": 5
      },
      "lineNbr": 53,
      "author": {
        "id": 128
      },
      "writtenOn": "2016-03-22T15:58:04Z",
      "side": 1,
      "message": "This could theoretically happen. If it happens, do we want mediawiki to exit with an uncaught exception? At least, the error message should tell us *which* page has the wrong content type, so we can fix it...",
      "revId": "abc2875c5478540beb805ec1e1541063b8cc409f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee33df1d_fbcdca8a",
        "filename": "lib/includes/store/MediaWikiPagePropertyOrderProvider.php",
        "patchSetId": 5
      },
      "lineNbr": 56,
      "author": {
        "id": 128
      },
      "writtenOn": "2016-03-22T15:58:04Z",
      "side": 1,
      "message": "For good measure, we should either check that the return value is a string, or use strval to force it to be a string.",
      "revId": "abc2875c5478540beb805ec1e1541063b8cc409f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee33df1d_7b8ffa26",
        "filename": "lib/includes/store/PropertyOrderProvider.php",
        "patchSetId": 5
      },
      "lineNbr": 15,
      "author": {
        "id": 128
      },
      "writtenOn": "2016-03-22T15:58:04Z",
      "side": 1,
      "message": "Do we also want to guarantee that the array is sorted by ordinal number? That would be convenient.",
      "revId": "abc2875c5478540beb805ec1e1541063b8cc409f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee33df1d_fb9aea62",
        "filename": "lib/includes/store/PropertyOrderProviderException.php",
        "patchSetId": 5
      },
      "lineNbr": 15,
      "author": {
        "id": 128
      },
      "writtenOn": "2016-03-22T15:58:04Z",
      "side": 1,
      "message": "this isn\u0027t really helpful. Perhaps just require the parameter.",
      "revId": "abc2875c5478540beb805ec1e1541063b8cc409f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee33df1d_7bb6dad8",
        "filename": "lib/tests/phpunit/store/MediaWikiPagePropertyOrderProviderTest.php",
        "patchSetId": 5
      },
      "lineNbr": 55,
      "author": {
        "id": 128
      },
      "writtenOn": "2016-03-22T15:58:04Z",
      "side": 1,
      "message": "Also test with random crap at the top, before the list. Also test having things that look like property IDs outside the list.",
      "revId": "abc2875c5478540beb805ec1e1541063b8cc409f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}