{
  "comments": [
    {
      "key": {
        "uuid": "1c53be57_4ff58e21",
        "filename": "data-access/tests/phpunit/DataAccessSettingsTestDoubleFactory.php",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 4699
      },
      "writtenOn": "2019-06-14T10:57:27Z",
      "side": 1,
      "message": "Why should they? DataAccessSettings is a pure data class with no internal logic (other than multiplying a constructor argument by 1024, I suppose), what’s the point in mocking it?",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 9,
        "endChar": 92
      },
      "revId": "a980ed356c344104fdb93848d57645ad7df88094",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56083f64_3966cbe8",
        "filename": "data-access/tests/phpunit/DataAccessSettingsTestDoubleFactory.php",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 6768
      },
      "writtenOn": "2019-06-14T20:10:18Z",
      "side": 1,
      "message": "Users of the class do not know, ideally, whether it is just a data class or not. I mean it could be communicated that it is as such (conventionally or in its documentation), then yes it doens\u0027t make much sense to provide a double for it.",
      "parentUuid": "1c53be57_4ff58e21",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 9,
        "endChar": 92
      },
      "revId": "a980ed356c344104fdb93848d57645ad7df88094",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f47d69e_b1353b21",
        "filename": "data-access/tests/phpunit/DataAccessSettingsTestDoubleFactory.php",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 4699
      },
      "writtenOn": "2019-06-17T17:25:55Z",
      "side": 1,
      "message": "I’m trying to wrap my head around this, but it’s not working very well :D\n\nI think this would make more sense if DataAccessSettings was an interface, and the current class was one implementation (perhaps called StaticDataAccessSettings), but there could also be other implementations – for example, the current class is usually initialized with the same snippet of $settings-\u003eget( \u0027four settings for four constructor arguments\u0027 ), so an alternative implementation could just accept a single Settings object and deduplicate that logic.\n\nBut even then, I don’t see the point of mocking the interface when a perfectly suitable real implementation is already available (StaticDataAccessSettings). Unless, perhaps, you want to ensure that only certain settings are accessed, and throw an exception if any other getter is called?",
      "parentUuid": "56083f64_3966cbe8",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 9,
        "endChar": 92
      },
      "revId": "a980ed356c344104fdb93848d57645ad7df88094",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28b2db5f_42a7c4f7",
        "filename": "data-access/tests/phpunit/DataAccessSettingsTestDoubleFactory.php",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 6768
      },
      "writtenOn": "2019-06-18T09:09:53Z",
      "side": 1,
      "message": "oh that\u0027s a left-over that I should\u0027ve removed .. after the previous discussion that this is more of a value object here than an entity or service, then yes this comment should be removed as there\u0027s no need to provide mocking facility around this, and tests can just use the class directly to setup their tests and assertions.\n\nSorry about the confusion I created by forgetting to remove this comment.",
      "parentUuid": "4f47d69e_b1353b21",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 9,
        "endChar": 92
      },
      "revId": "a980ed356c344104fdb93848d57645ad7df88094",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    }
  ]
}