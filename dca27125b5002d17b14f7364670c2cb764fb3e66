{
  "comments": [
    {
      "key": {
        "uuid": "b3a29fe3_9e978006",
        "filename": "composer.json",
        "patchSetId": 11
      },
      "lineNbr": 39,
      "author": {
        "id": 106
      },
      "writtenOn": "2018-07-11T09:41:22Z",
      "side": 1,
      "message": "Needs to be added to mediawiki-vendor too, would be good to state that in the comment message / add the patch already so it is not missed.",
      "range": {
        "startLine": 39,
        "startChar": 3,
        "endLine": 39,
        "endChar": 19
      },
      "revId": "dca27125b5002d17b14f7364670c2cb764fb3e66",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ddadc599_8aede121",
        "filename": "lib/includes/SimpleCacheWithBagOStuff.php",
        "patchSetId": 11
      },
      "lineNbr": 30,
      "author": {
        "id": 106
      },
      "writtenOn": "2018-07-11T09:41:22Z",
      "side": 1,
      "message": "This throws a zPsr\\SimpleCache\\InvalidArgumentException",
      "range": {
        "startLine": 30,
        "startChar": 12,
        "endLine": 30,
        "endChar": 37
      },
      "revId": "dca27125b5002d17b14f7364670c2cb764fb3e66",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cb41df4b_66aefc27",
        "filename": "lib/includes/SimpleCacheWithBagOStuff.php",
        "patchSetId": 11
      },
      "lineNbr": 30,
      "author": {
        "id": 4089
      },
      "writtenOn": "2018-07-11T10:23:17Z",
      "side": 1,
      "message": "See line 246: it throws both instance of `Psr\\SimpleCache\\InvalidArgumentException` and instance of `\\InvalidArgumentException`.\n\nAs soon as constructor is not a part of an interface I thought there is no need to throw cache related exception - generic `\\InvalidArgumentException` would be better as soon as this use-case should not be expected in the code and exception should not be caught.",
      "parentUuid": "ddadc599_8aede121",
      "range": {
        "startLine": 30,
        "startChar": 12,
        "endLine": 30,
        "endChar": 37
      },
      "revId": "dca27125b5002d17b14f7364670c2cb764fb3e66",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2ab288d_724f359e",
        "filename": "lib/includes/SimpleCacheWithBagOStuff.php",
        "patchSetId": 11
      },
      "lineNbr": 30,
      "author": {
        "id": 106
      },
      "writtenOn": "2018-07-11T10:25:16Z",
      "side": 1,
      "message": "Right, then the issue my IDE is complaining about is actually in the phpdoc of assertKeyIsValid and that only says it throws a InvalidArgumentException not an \\InvalidArgumentException",
      "parentUuid": "cb41df4b_66aefc27",
      "range": {
        "startLine": 30,
        "startChar": 12,
        "endLine": 30,
        "endChar": 37
      },
      "revId": "dca27125b5002d17b14f7364670c2cb764fb3e66",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "81341904_bbd11f4e",
        "filename": "lib/includes/SimpleCacheWithBagOStuff.php",
        "patchSetId": 11
      },
      "lineNbr": 30,
      "author": {
        "id": 4089
      },
      "writtenOn": "2018-07-11T10:55:04Z",
      "side": 1,
      "message": "Shouldn\u0027t it be as with code style? \"if CI  doesn\u0027t complain then it is fine\"",
      "parentUuid": "d2ab288d_724f359e",
      "range": {
        "startLine": 30,
        "startChar": 12,
        "endLine": 30,
        "endChar": 37
      },
      "revId": "dca27125b5002d17b14f7364670c2cb764fb3e66",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84213b7e_7eb521a2",
        "filename": "lib/includes/SimpleCacheWithBagOStuff.php",
        "patchSetId": 11
      },
      "lineNbr": 30,
      "author": {
        "id": 106
      },
      "writtenOn": "2018-07-11T10:56:11Z",
      "side": 1,
      "message": "This isn\u0027t really a code style issue, it is incorrect documentation",
      "parentUuid": "81341904_bbd11f4e",
      "range": {
        "startLine": 30,
        "startChar": 12,
        "endLine": 30,
        "endChar": 37
      },
      "revId": "dca27125b5002d17b14f7364670c2cb764fb3e66",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2f6bf8b1_22bf299a",
        "filename": "lib/includes/SimpleCacheWithBagOStuff.php",
        "patchSetId": 11
      },
      "lineNbr": 30,
      "author": {
        "id": 4089
      },
      "writtenOn": "2018-07-11T11:07:20Z",
      "side": 1,
      "message": "Fixed.\n\nBut it shouldn\u0027t be a blocker. Especially because fix is `@throws InvalidArgumentException|\\InvalidArgumentException` which doesn\u0027t bring any value for the reader.",
      "parentUuid": "84213b7e_7eb521a2",
      "range": {
        "startLine": 30,
        "startChar": 12,
        "endLine": 30,
        "endChar": 37
      },
      "revId": "dca27125b5002d17b14f7364670c2cb764fb3e66",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c39c2ab0_5af2168b",
        "filename": "lib/includes/SimpleCacheWithBagOStuff.php",
        "patchSetId": 11
      },
      "lineNbr": 58,
      "author": {
        "id": 106
      },
      "writtenOn": "2018-07-11T09:41:22Z",
      "side": 1,
      "message": "Also should needs unserialize, see my comment below",
      "range": {
        "startLine": 58,
        "startChar": 9,
        "endLine": 58,
        "endChar": 20
      },
      "revId": "dca27125b5002d17b14f7364670c2cb764fb3e66",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "af7a271c_7f28d901",
        "filename": "lib/includes/SimpleCacheWithBagOStuff.php",
        "patchSetId": 11
      },
      "lineNbr": 79,
      "author": {
        "id": 106
      },
      "writtenOn": "2018-07-11T09:41:22Z",
      "side": 1,
      "message": "We shouldn\u0027t need to serialize here, BagOStuffs handle serialization if needed and this will just result in double serialization in those cases, also it will waste processing time.",
      "range": {
        "startLine": 79,
        "startChar": 11,
        "endLine": 79,
        "endChar": 20
      },
      "revId": "dca27125b5002d17b14f7364670c2cb764fb3e66",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dddbfe08_69a8dd1f",
        "filename": "lib/includes/SimpleCacheWithBagOStuff.php",
        "patchSetId": 11
      },
      "lineNbr": 79,
      "author": {
        "id": 4089
      },
      "writtenOn": "2018-07-11T10:16:52Z",
      "side": 1,
      "message": "`BagOStuff` does not do any serialization. Some implementations do serialize, some rely on serialization in cache storage client libraries.\nFor example, `HashBagOStuff` doesn\u0027t do any serialization.\n\nThere is a requirement for `CacheInterface`:\n```\n$a \u003d new \\stdClass();\n$obj-\u003efoo \u003d \u0027value\u0027;\n$cache-\u003eset(\u0027a\u0027, $a);\n$obj-\u003efoo \u003d \u0027changed\u0027;\n\n$a1 \u003d $cache-\u003eget(\u0027a\u0027);\n\nassert($a1-\u003efoo \u003d\u003d\u003d \u0027value\u0027);\n```\n\nSee `\\Cache\\IntegrationTests\\SimpleCacheTest::testObjectDoesNotChangeInCache()`\n\nSerialization was added because it is the most simple way to achieve this.\n\n\u003e  result in double serialization \n\nI don\u0027t see any problem there.\n\n\u003e also it will waste processing time.\n\nHow much will it waste? \nIt looks like a request for microoptimization. I don\u0027t think code should be made more complicated without proven need.",
      "parentUuid": "af7a271c_7f28d901",
      "range": {
        "startLine": 79,
        "startChar": 11,
        "endLine": 79,
        "endChar": 20
      },
      "revId": "dca27125b5002d17b14f7364670c2cb764fb3e66",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5aaf5a6_0cee159b",
        "filename": "lib/includes/SimpleCacheWithBagOStuff.php",
        "patchSetId": 11
      },
      "lineNbr": 79,
      "author": {
        "id": 106
      },
      "writtenOn": "2018-07-11T10:20:54Z",
      "side": 1,
      "message": "\u003e How much will it waste? \nSerialization and deserialization is still one of the biggest \u0027time wasters\u0027 in wikibase code. it depends on what the cache is serializing, if this ever gets used to whole entities for example, then not doing a double serialization would probably be an optimization that we want.\n\nIt might just be worth adding a note somewhere for the bagostuff adapter saying that depending on the bag used double serialization can happen.",
      "parentUuid": "dddbfe08_69a8dd1f",
      "range": {
        "startLine": 79,
        "startChar": 11,
        "endLine": 79,
        "endChar": 20
      },
      "revId": "dca27125b5002d17b14f7364670c2cb764fb3e66",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6341b3b3_1aaa2030",
        "filename": "lib/includes/SimpleCacheWithBagOStuff.php",
        "patchSetId": 11
      },
      "lineNbr": 79,
      "author": {
        "id": 4089
      },
      "writtenOn": "2018-07-11T10:47:35Z",
      "side": 1,
      "message": "Ok, here is microbenchmark (see at the bottom).\n\nResults:\n```\nnoop: 8ms per 10000 iterations\nserialize entity: 453ms per 10000 iterations\nserialize entity second time: 16ms per 10000 iterations\n```\n\nAs we can see, serialization of an object really takes some time, but serializing string (something that is serialized already) is very lightweight operation.\n\nTaking these numbers into account, I think we should never care about this ever.\n\n\u003e Serialization and deserialization is still one of the biggest \u0027time wasters\u0027 in wikibase code\n\nIf we are talking about classes like `ItemSerializer`, it is completely different issue.\n\nIf we are talking about native serialization, it is probably because we work a lot with caches and stuff in cache is serialized. If we remove caches, the biggest time waster would be something else, I beleive.\n\nMicrobenchmark code (paste it in any PhpUnit test case in Wikibase to run)\n```\npublic function testSerializationPerformance() {\n\t\t$item \u003d NewItem::withId(\u0027Q1\u0027)\n\t\t\t-\u003eandLabel(\u0027en\u0027, \u0027label-en\u0027)\n\t\t\t-\u003eandLabel(\u0027de\u0027, \u0027label-de\u0027)\n\t\t\t-\u003eandDescription(\u0027en\u0027, \u0027en description\u0027)\n\t\t\t-\u003eandDescription(\u0027de\u0027, \u0027de description\u0027)\n\t\t\t-\u003eandAliases(\u0027en\u0027, [\u0027a1\u0027, \u0027a2\u0027])\n\t\t\t-\u003eandAliases(\u0027de\u0027, [\u0027a1\u0027, \u0027a2\u0027])\n\t\t\t-\u003eandStatement(\n\t\t\t\tNewStatement::someValueFor(\u0027P1\u0027)\n\t\t\t\t\t-\u003ewithSomeGuid()\n\t\t\t\t\t-\u003ewithValue(\"TEST\")\n\t\t\t\t\t-\u003ewithQualifier(\u0027P3\u0027, \u0027q\u0027)\n\t\t\t)-\u003eandStatement(\n\t\t\t\tNewStatement::someValueFor(\u0027P2\u0027)\n\t\t\t\t\t-\u003ewithSomeGuid()\n\t\t\t\t\t-\u003ewithValue(\"TEST\")\n\t\t\t\t\t-\u003ewithQualifier(\u0027P3\u0027, \u0027q\u0027)\n\t\t\t)-\u003eandStatement(\n\t\t\t\tNewStatement::someValueFor(\u0027P3\u0027)\n\t\t\t\t\t-\u003ewithSomeGuid()\n\t\t\t\t\t-\u003ewithValue(\"TEST\")\n\t\t\t\t\t-\u003ewithQualifier(\u0027P3\u0027, \u0027q\u0027)\n\t\t\t)-\u003eandStatement(\n\t\t\t\tNewStatement::someValueFor(\u0027P4\u0027)\n\t\t\t\t\t-\u003ewithSomeGuid()\n\t\t\t\t\t-\u003ewithValue(\"TEST\")\n\t\t\t\t\t-\u003ewithQualifier(\u0027P3\u0027, \u0027q\u0027)\n\t\t\t)-\u003ebuild();\n\n\n\t\t$measure \u003d function ($name, callable $f) {\n\t\t\t$start \u003d microtime( true );\n\n\t\t\t$iterations \u003d 10000;\n\t\t\tfor ( $i \u003d 0; $i \u003c $iterations; $i++ ) {\n\t\t\t\t$f();\n\t\t\t}\n\t\t\t$done \u003d microtime( true );\n\n\t\t\t$taken \u003d $done - $start;\n\n\t\t\techo \"$name: \" . round( $taken * 1000 ) . \"ms per $iterations iterations\" . PHP_EOL;\n\t\t};\n\n\t\t$measure(\u0027noop\u0027, function () {});\n\t\t$measure(\u0027serialize entity\u0027, function () use ($item) {\n\t\t\tserialize( $item );\n\t\t});\n\n\t\t$string \u003d serialize( $item );\n\n\t\t$measure(\u0027serialize entity second time\u0027, function () use ($string) {\n\t\t\tserialize( $string );\n\t\t});\n\n\t}\n```",
      "parentUuid": "c5aaf5a6_0cee159b",
      "range": {
        "startLine": 79,
        "startChar": 11,
        "endLine": 79,
        "endChar": 20
      },
      "revId": "dca27125b5002d17b14f7364670c2cb764fb3e66",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3ddf6dfe_2230480c",
        "filename": "lib/includes/SimpleCacheWithBagOStuff.php",
        "patchSetId": 11
      },
      "lineNbr": 79,
      "author": {
        "id": 2626
      },
      "writtenOn": "2018-07-16T12:57:06Z",
      "side": 1,
      "message": "I find the micro-benchmark results quite convincing enough to not be worried with the double serialization for now.\nNote that lookup using this cache is going to be first used for a small subset of items only, so even this is going to become a performance issue, we are going to be able to control it quite well.\n\nI can understand reservations about using native PHP serialization here. Would \"hiding\" it it (e.g. having cache use some \"serializer\" encapsulating the use of PHP\u0027s serialize/unserialize) help here Addshore?\nI am not sure myself how much of improvement would this be.",
      "parentUuid": "6341b3b3_1aaa2030",
      "range": {
        "startLine": 79,
        "startChar": 11,
        "endLine": 79,
        "endChar": 20
      },
      "revId": "dca27125b5002d17b14f7364670c2cb764fb3e66",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "35e927fd_1c4ead7c",
        "filename": "lib/includes/SimpleCacheWithBagOStuff.php",
        "patchSetId": 11
      },
      "lineNbr": 79,
      "author": {
        "id": 16
      },
      "writtenOn": "2018-07-16T15:27:55Z",
      "side": 1,
      "message": "HashBagOStuff could just be changed to serialize and various callers could be moved off to MapCacheRLU (which does not serialize). That would avoid an extra layer here.",
      "parentUuid": "3ddf6dfe_2230480c",
      "range": {
        "startLine": 79,
        "startChar": 11,
        "endLine": 79,
        "endChar": 20
      },
      "revId": "dca27125b5002d17b14f7364670c2cb764fb3e66",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "757b3492_9e537bac",
        "filename": "lib/includes/SimpleCacheWithBagOStuff.php",
        "patchSetId": 11
      },
      "lineNbr": 79,
      "author": {
        "id": 106
      },
      "writtenOn": "2018-07-27T14:06:40Z",
      "side": 1,
      "message": "That sounds like a good plan, the contract of BagOStuffs would then essentially follow the part of the contract for psr16 we are trying to adhere to here.",
      "parentUuid": "35e927fd_1c4ead7c",
      "range": {
        "startLine": 79,
        "startChar": 11,
        "endLine": 79,
        "endChar": 20
      },
      "revId": "dca27125b5002d17b14f7364670c2cb764fb3e66",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ced71be2_2218b00a",
        "filename": "lib/includes/SimpleCacheWithBagOStuff.php",
        "patchSetId": 11
      },
      "lineNbr": 108,
      "author": {
        "id": 106
      },
      "writtenOn": "2018-07-11T09:41:22Z",
      "side": 1,
      "message": "This would potentially be possible to implement for certain types of cache, for example HashBagOStuff which has a clear method.\nAlso EmptyBagOStuff, this could always return true, it is always empty?\n\nAlso in the PSR6 adapter I actually kept an in memory list of keys that were saved in the cache pool and then cleared each of them https://github.com/addshore/psr-6-mediawiki-bagostuff-adapter/blob/master/src/BagOStuffPsrCache.php#L59-L61\nLooking back on that though that\u0027s probably fairly evil for long term persistent caches like memcached, but works for in memory caching in single requests.",
      "range": {
        "startLine": 105,
        "startChar": 1,
        "endLine": 108,
        "endChar": 2
      },
      "revId": "dca27125b5002d17b14f7364670c2cb764fb3e66",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e17a3ab6_444a4884",
        "filename": "lib/includes/SimpleCacheWithBagOStuff.php",
        "patchSetId": 11
      },
      "lineNbr": 108,
      "author": {
        "id": 4089
      },
      "writtenOn": "2018-07-11T10:16:52Z",
      "side": 1,
      "message": "There are at least three possible implementations that make sense:\n  1. Delete everything in the storage\n  2. Delete all entries that were saved using this object\n  3. Delete all entries with keys having given prefix (see constructor)\n\nAs soon as we don\u0027t have a need for any of these, I don\u0027t see any reason to implement this method. At least, because it is not clear which logic it should follow and also it might lead to accidental cache cleanups.",
      "parentUuid": "ced71be2_2218b00a",
      "range": {
        "startLine": 105,
        "startChar": 1,
        "endLine": 108,
        "endChar": 2
      },
      "revId": "dca27125b5002d17b14f7364670c2cb764fb3e66",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "499b0498_4bdfc8b3",
        "filename": "lib/includes/SimpleCacheWithBagOStuff.php",
        "patchSetId": 11
      },
      "lineNbr": 139,
      "author": {
        "id": 106
      },
      "writtenOn": "2018-07-11T09:41:22Z",
      "side": 1,
      "message": "Another unserialize call here that we could cull",
      "range": {
        "startLine": 139,
        "startChar": 22,
        "endLine": 139,
        "endChar": 33
      },
      "revId": "dca27125b5002d17b14f7364670c2cb764fb3e66",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb812c63_490d3d49",
        "filename": "lib/includes/SimpleCacheWithBagOStuff.php",
        "patchSetId": 11
      },
      "lineNbr": 166,
      "author": {
        "id": 106
      },
      "writtenOn": "2018-07-11T09:41:22Z",
      "side": 1,
      "message": "Another serialize call here",
      "range": {
        "startLine": 166,
        "startChar": 37,
        "endLine": 166,
        "endChar": 46
      },
      "revId": "dca27125b5002d17b14f7364670c2cb764fb3e66",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}