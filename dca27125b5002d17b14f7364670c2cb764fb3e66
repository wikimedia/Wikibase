{
  "comments": [
    {
      "key": {
        "uuid": "b3a29fe3_9e978006",
        "filename": "composer.json",
        "patchSetId": 11
      },
      "lineNbr": 39,
      "author": {
        "id": 106
      },
      "writtenOn": "2018-07-11T09:41:22Z",
      "side": 1,
      "message": "Needs to be added to mediawiki-vendor too, would be good to state that in the comment message / add the patch already so it is not missed.",
      "range": {
        "startLine": 39,
        "startChar": 3,
        "endLine": 39,
        "endChar": 19
      },
      "revId": "dca27125b5002d17b14f7364670c2cb764fb3e66",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ddadc599_8aede121",
        "filename": "lib/includes/SimpleCacheWithBagOStuff.php",
        "patchSetId": 11
      },
      "lineNbr": 30,
      "author": {
        "id": 106
      },
      "writtenOn": "2018-07-11T09:41:22Z",
      "side": 1,
      "message": "This throws a zPsr\\SimpleCache\\InvalidArgumentException",
      "range": {
        "startLine": 30,
        "startChar": 12,
        "endLine": 30,
        "endChar": 37
      },
      "revId": "dca27125b5002d17b14f7364670c2cb764fb3e66",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c39c2ab0_5af2168b",
        "filename": "lib/includes/SimpleCacheWithBagOStuff.php",
        "patchSetId": 11
      },
      "lineNbr": 58,
      "author": {
        "id": 106
      },
      "writtenOn": "2018-07-11T09:41:22Z",
      "side": 1,
      "message": "Also should needs unserialize, see my comment below",
      "range": {
        "startLine": 58,
        "startChar": 9,
        "endLine": 58,
        "endChar": 20
      },
      "revId": "dca27125b5002d17b14f7364670c2cb764fb3e66",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "af7a271c_7f28d901",
        "filename": "lib/includes/SimpleCacheWithBagOStuff.php",
        "patchSetId": 11
      },
      "lineNbr": 79,
      "author": {
        "id": 106
      },
      "writtenOn": "2018-07-11T09:41:22Z",
      "side": 1,
      "message": "We shouldn\u0027t need to serialize here, BagOStuffs handle serialization if needed and this will just result in double serialization in those cases, also it will waste processing time.",
      "range": {
        "startLine": 79,
        "startChar": 11,
        "endLine": 79,
        "endChar": 20
      },
      "revId": "dca27125b5002d17b14f7364670c2cb764fb3e66",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dddbfe08_69a8dd1f",
        "filename": "lib/includes/SimpleCacheWithBagOStuff.php",
        "patchSetId": 11
      },
      "lineNbr": 79,
      "author": {
        "id": 4089
      },
      "writtenOn": "2018-07-11T10:16:52Z",
      "side": 1,
      "message": "`BagOStuff` does not do any serialization. Some implementations do serialize, some rely on serialization in cache storage client libraries.\nFor example, `HashBagOStuff` doesn\u0027t do any serialization.\n\nThere is a requirement for `CacheInterface`:\n```\n$a \u003d new \\stdClass();\n$obj-\u003efoo \u003d \u0027value\u0027;\n$cache-\u003eset(\u0027a\u0027, $a);\n$obj-\u003efoo \u003d \u0027changed\u0027;\n\n$a1 \u003d $cache-\u003eget(\u0027a\u0027);\n\nassert($a1-\u003efoo \u003d\u003d\u003d \u0027value\u0027);\n```\n\nSee `\\Cache\\IntegrationTests\\SimpleCacheTest::testObjectDoesNotChangeInCache()`\n\nSerialization was added because it is the most simple way to achieve this.\n\n\u003e  result in double serialization \n\nI don\u0027t see any problem there.\n\n\u003e also it will waste processing time.\n\nHow much will it waste? \nIt looks like a request for microoptimization. I don\u0027t think code should be made more complicated without proven need.",
      "parentUuid": "af7a271c_7f28d901",
      "range": {
        "startLine": 79,
        "startChar": 11,
        "endLine": 79,
        "endChar": 20
      },
      "revId": "dca27125b5002d17b14f7364670c2cb764fb3e66",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ced71be2_2218b00a",
        "filename": "lib/includes/SimpleCacheWithBagOStuff.php",
        "patchSetId": 11
      },
      "lineNbr": 108,
      "author": {
        "id": 106
      },
      "writtenOn": "2018-07-11T09:41:22Z",
      "side": 1,
      "message": "This would potentially be possible to implement for certain types of cache, for example HashBagOStuff which has a clear method.\nAlso EmptyBagOStuff, this could always return true, it is always empty?\n\nAlso in the PSR6 adapter I actually kept an in memory list of keys that were saved in the cache pool and then cleared each of them https://github.com/addshore/psr-6-mediawiki-bagostuff-adapter/blob/master/src/BagOStuffPsrCache.php#L59-L61\nLooking back on that though that\u0027s probably fairly evil for long term persistent caches like memcached, but works for in memory caching in single requests.",
      "range": {
        "startLine": 105,
        "startChar": 1,
        "endLine": 108,
        "endChar": 2
      },
      "revId": "dca27125b5002d17b14f7364670c2cb764fb3e66",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e17a3ab6_444a4884",
        "filename": "lib/includes/SimpleCacheWithBagOStuff.php",
        "patchSetId": 11
      },
      "lineNbr": 108,
      "author": {
        "id": 4089
      },
      "writtenOn": "2018-07-11T10:16:52Z",
      "side": 1,
      "message": "There are at least three possible implementations that make sense:\n  1. Delete everything in the storage\n  2. Delete all entries that were saved using this object\n  3. Delete all entries with keys having given prefix (see constructor)\n\nAs soon as we don\u0027t have a need for any of these, I don\u0027t see any reason to implement this method. At least, because it is not clear which logic it should follow and also it might lead to accidental cache cleanups.",
      "parentUuid": "ced71be2_2218b00a",
      "range": {
        "startLine": 105,
        "startChar": 1,
        "endLine": 108,
        "endChar": 2
      },
      "revId": "dca27125b5002d17b14f7364670c2cb764fb3e66",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "499b0498_4bdfc8b3",
        "filename": "lib/includes/SimpleCacheWithBagOStuff.php",
        "patchSetId": 11
      },
      "lineNbr": 139,
      "author": {
        "id": 106
      },
      "writtenOn": "2018-07-11T09:41:22Z",
      "side": 1,
      "message": "Another unserialize call here that we could cull",
      "range": {
        "startLine": 139,
        "startChar": 22,
        "endLine": 139,
        "endChar": 33
      },
      "revId": "dca27125b5002d17b14f7364670c2cb764fb3e66",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb812c63_490d3d49",
        "filename": "lib/includes/SimpleCacheWithBagOStuff.php",
        "patchSetId": 11
      },
      "lineNbr": 166,
      "author": {
        "id": 106
      },
      "writtenOn": "2018-07-11T09:41:22Z",
      "side": 1,
      "message": "Another serialize call here",
      "range": {
        "startLine": 166,
        "startChar": 37,
        "endLine": 166,
        "endChar": 46
      },
      "revId": "dca27125b5002d17b14f7364670c2cb764fb3e66",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}