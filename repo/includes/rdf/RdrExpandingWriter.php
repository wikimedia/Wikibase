<?php

namespace Wikibase\RDF;

/**
 * RdfStatementWriter implementation that expands RDR statements. The expanded form
 * is generated by calling back to an RdfWriter instance.
 *
 * Expansion is implemented in accordance with the paper "Foundations of an
 * Alternative Approach to Reification in RDF" by Olaf Hartig and Bryan Thompson,
 * see <http://arxiv.org/pdf/1406.3399.pdf>.
 *
 * In practical terms, this writer accepts a single statement (triple), generated using the
 * about( X )->say( Y )->is( Z ) sequence. This is interpreted as the
 * RDR statement << :X :Y :Z >> and expanded to:
 *
 * @code
 * :subject :predicate :object.
 *
 * _:s rdf:type rdf:Statement ;
 *     rdf:subject :X ;
 *     rdf:predicate :Y ;
 *     rdf:object :Z .
 * @endcode
 *
 * That is, the RDR statement is interpreted to be present in both its reified and
 * unreified form.
 *
 * @license GPL 2+
 * @author Daniel Kinzler
 */
class RdrExpandingWriter implements RdfStatementWriter {

	/**
	 * @var RdfWriter
	 */
	private $truthyWriter;

	/**
	 * @var RdfWriter
	 */
	private $reifiedWriter;

	/**
	 * @param RdfWriter $truthyWriter A writer to receive the unreified form of the statement
	 * @param RdfWriter $reifiedWriter A writer to receive the reified form of the statement.
	 *        This is usually create by calling $truthyWriter->sub().
	 */
	public function __construct( RdfWriter $truthyWriter, RdfWriter $reifiedWriter ) {
		$this->truthyWriter = $truthyWriter;
		$this->reifiedWriter = $reifiedWriter;
	}

	/**
	 * Start an about clause. May or may not immediately write anything.
	 * Must be preceded by a call to start().
	 * May remember the subject reference for later use.
	 *
	 * @param string $base A QName prefix if $local is given, or an IRI if $local is null.
	 * @param string|null $local A QName suffix, or null if $base is an IRI.
	 *
	 * @return RdfWriter $this
	 */
	public function about( $base, $local = null ) {
		$this->truthyWriter->about( $base, $local );

		$this->reifiedWriter->about( '_', $this->reifiedWriter->blank() )->a( 'rdf', 'Statement' )
			->say( 'rdf', 'Subject' )->is( $base, $local );
	}

	/**
	 * Start a predicate clause. May or may not immediately write anything.
	 * Must be preceded by a call to about().
	 * May remember the verb reference for later use.
	 *
	 * @param string $base A QName prefix if $local is given, or an IRI or shorthand if $local is null.
	 * @param string|null $local A QName suffix, or null if $base is an IRI or shorthand.
	 *
	 * @return RdfWriter $this
	 */
	public function say( $base, $local = null ) {
		$this->truthyWriter->say( $base, $local );
		$this->reifiedWriter
			->say( 'rdf', 'Predicate' )->is( $base, $local );
	}

	/**
	 * Emits a resource object.
	 * Must be preceded by a call to predicate().
	 *
	 * @param string $base A QName prefix if $local is given, or an IRI or shorthand if $local is null.
	 * @param string|null $local A QName suffix, or null if $base is an IRI or shorthand.
	 *
	 * @return RdfWriter $this
	 */
	public function is( $base, $local = null ) {
		$this->truthyWriter->is( $base, $local );
		$this->reifiedWriter
			->say( 'rdf', 'Object' )->is( $base, $local );
	}

	/**
	 * Emits a text object.
	 * Must be preceded by a call to say().
	 *
	 * @param string $text the text to be writeted
	 * @param string|null $language the language the text is in
	 *
	 * @return RdfWriter $this
	 */
	public function text( $text, $language = null ) {
		$this->truthyWriter->text( $text, $language );
		$this->reifiedWriter
			->say( 'rdf', 'Object' )->text( $text, $language );
	}


	/**
	 * Emits a value object.
	 * Must be preceded by a call to say().
	 *
	 * @param string $literal the value encoded as a string
	 * @param string $typeBase The data type's QName prefix if $typeLocal is given,
	 *        or an IRI or shorthand if $typeLocal is null.
	 * @param string|null $typeLocal The data type's  QName suffix,
	 *        or null if $typeBase is an IRI or shorthand.
	 *
	 * @return RdfWriter $this
	 */
	public function value( $literal, $typeBase = null, $typeLocal = null ) {
		$this->truthyWriter->value( $literal, $typeBase, $typeLocal );
		$this->reifiedWriter
			->say( 'rdf', 'Object' )->value( $literal, $typeBase, $typeLocal );
	}

}
