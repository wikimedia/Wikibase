{
  "comments": [
    {
      "key": {
        "uuid": "9079f540_b742b7d8",
        "filename": "lib/tests/phpunit/Modules/SitesModuleTest.php",
        "patchSetId": 5
      },
      "lineNbr": 51,
      "author": {
        "id": 6768
      },
      "writtenOn": "2019-04-02T09:58:49Z",
      "side": 1,
      "message": "I don\u0027t understand the \"_details\" suffix. what does it specify? if nothing significant I would remove it",
      "revId": "19af123176fe13f648acf7de5ff3b74ad28eb5af",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1eefaaaa_5ec17358",
        "filename": "lib/tests/phpunit/Modules/SitesModuleTest.php",
        "patchSetId": 5
      },
      "lineNbr": 51,
      "author": {
        "id": 34
      },
      "writtenOn": "2019-04-02T22:00:47Z",
      "side": 1,
      "message": "testGetScript_structure asserts the structure and \"wbSiteDetails\" response.\n\ntestGetScript_details asserts the actual \"details\" part of \"wbSiteDetails\".\n\nI could call this \"data\", \"info\" or \"content\" as well. Any preferences?",
      "parentUuid": "9079f540_b742b7d8",
      "revId": "19af123176fe13f648acf7de5ff3b74ad28eb5af",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "316f6b59_3b8fee91",
        "filename": "lib/tests/phpunit/Modules/SitesModuleTest.php",
        "patchSetId": 5
      },
      "lineNbr": 110,
      "author": {
        "id": 6768
      },
      "writtenOn": "2019-04-02T09:58:49Z",
      "side": 1,
      "message": "same as above re suffix. this can be named, following conventions, `testMakeScriptCachesScripts` or `testMakeScript_cachesScripts` if you wanna keep the convention `\u003ctestMethodName_TestedBehavior`. It should also probably use GetScript in the name and not MakeScript, details on that in comment below.",
      "revId": "19af123176fe13f648acf7de5ff3b74ad28eb5af",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26e1537f_0c8cfe49",
        "filename": "lib/tests/phpunit/Modules/SitesModuleTest.php",
        "patchSetId": 5
      },
      "lineNbr": 110,
      "author": {
        "id": 34
      },
      "writtenOn": "2019-04-02T22:06:27Z",
      "side": 1,
      "message": "Good point. It is testing getScript not makeScript.\n\nMy idea was that this function is to \"test makeScript caching\" - the caching of makeScript output. But I agree that is confusing and inconsistent, I do not know why I chose it :)",
      "parentUuid": "316f6b59_3b8fee91",
      "revId": "19af123176fe13f648acf7de5ff3b74ad28eb5af",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4bb18127_22fea68e",
        "filename": "lib/tests/phpunit/Modules/SitesModuleTest.php",
        "patchSetId": 5
      },
      "lineNbr": 118,
      "author": {
        "id": 6768
      },
      "writtenOn": "2019-04-02T09:58:49Z",
      "side": 1,
      "message": "The method should is actually testing ::getScript, but reaching in to probe ::makeScript` when it is protected, and probably should be private in the first place if it weren\u0027t for this test.\n\nis it possible to test against\u0027 cache Mock here? like instead of calling twice and check for one call to `makeScript`, you\u0027d assert that the cache has the entry after the first call. That\u0027s not the ideal, but at least it keeps the test at the boundaries of the method.",
      "range": {
        "startLine": 117,
        "startChar": 0,
        "endLine": 118,
        "endChar": 52
      },
      "revId": "19af123176fe13f648acf7de5ff3b74ad28eb5af",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f54a935a_d6254a14",
        "filename": "lib/tests/phpunit/Modules/SitesModuleTest.php",
        "patchSetId": 5
      },
      "lineNbr": 118,
      "author": {
        "id": 34
      },
      "writtenOn": "2019-04-02T22:06:27Z",
      "side": 1,
      "message": "I\u0027m opposed to testing side-effects. My experience has taught me that it leads to tests which don\u0027t carry much meaning or confidence because they 1) duplicate the source logic and thus require more maintenance and 2) might not fail when the behaviour is broken.\n\nIt is imho irrelevant what happens to $cache. What matters is that the computation is not repeated. Hence I am asserting the observable behaviour and contract that the logic is meant to fulfil.",
      "parentUuid": "4bb18127_22fea68e",
      "range": {
        "startLine": 117,
        "startChar": 0,
        "endLine": 118,
        "endChar": 52
      },
      "revId": "19af123176fe13f648acf7de5ff3b74ad28eb5af",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "708f5a39_db7deb78",
        "filename": "lib/tests/phpunit/Modules/SitesModuleTest.php",
        "patchSetId": 5
      },
      "lineNbr": 118,
      "author": {
        "id": 34
      },
      "writtenOn": "2019-04-02T22:10:44Z",
      "side": 1,
      "message": "Regarding \"keeps the test at the boundaries of the method\" that is an anti-pattern I very deliberately avoided. I have never seen a unit test of an instance method (not static) that met the following three criteria:\n\n* the source class is well-written.\n* the test really only interacted with 1 method.\n* the test is asserting all relevant behaviour that method is intended to fulfil for that class.\n\nIn general what happens in my experience is that the test will actually call two or three different methods. For example, testing \"getFoo\" will typically call \"addFoo\" and then test that it is returned by \"getFoo\". That is imho very good and incredibly useful and what a unit test should be. But, it also means the unit test does not map 1:1 with a source method. Instead, they map to use cases. The unit is the class, not the method.\n\nAnyway, I\u0027m fine making the unit smaller as desired. Let me know how I can do that whilst still guaranteeing  that the method is working correctly.",
      "parentUuid": "f54a935a_d6254a14",
      "range": {
        "startLine": 117,
        "startChar": 0,
        "endLine": 118,
        "endChar": 52
      },
      "revId": "19af123176fe13f648acf7de5ff3b74ad28eb5af",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a06c5c08_7bbb28f6",
        "filename": "lib/tests/phpunit/Modules/SitesModuleTest.php",
        "patchSetId": 5
      },
      "lineNbr": 118,
      "author": {
        "id": 6768
      },
      "writtenOn": "2019-04-03T20:46:02Z",
      "side": 1,
      "message": "\u003e 1) duplicate the source logic and thus require more maintenance and 2) might not fail when the behaviour is broken.\n\nnot sure of 2 tbh .. in my experience, side effects are of two types .. one that do not affect your use-case behavior on later calls (so their state doesn\u0027t matter), and ones which do. Those which do affect a function behavior on later calls , make the function stateful and bound to their state. In that case I think it is actually necessary to test the side effects.\n\nAs for 1, it is the necessary maintenance for keeping tests truthful I believe. You can find a way to reduce maintenance, but that certainly shouldn\u0027t be on the expense of reducing test coverage of logic or testing internal non-public behavior (like in this case).\n\n\u003e In general what happens in my experience is that the test will actually call two or three different methods. For example, testing \"getFoo\" will typically call \"addFoo\" and then test that it is returned by \"getFoo\". That is imho very good and incredibly useful and what a unit test should be. But, it also means the unit test does not map 1:1 with a source method. Instead, they map to use cases. The unit is the class, not the method.\n\nEntirely true, and makes my point about \"cache here is a side effect that affects the behavior\" even clearer. I mean, this class behavior is dependent on cache behavior.\n\nTo make it clear and concrete, what I would be suggesting here is three separate tests (use-cases):\n1. testGetScript which asserts the correct value returned\n2. testGetScriptCachesScript which asserts the script is cached (by accessing the cache)\n3. testGetScriptUsesAvailableCachedScript which would start by setting up the cache with a value that affects the behavior, and then assert that the returned value matches what is stored in the cache.\n\nIn other words, cache state here is functioning like if it were another argument to the function than a side-effect.",
      "parentUuid": "708f5a39_db7deb78",
      "range": {
        "startLine": 117,
        "startChar": 0,
        "endLine": 118,
        "endChar": 52
      },
      "revId": "19af123176fe13f648acf7de5ff3b74ad28eb5af",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee2339d9_c399a635",
        "filename": "lib/tests/phpunit/Modules/SitesModuleTest.php",
        "patchSetId": 5
      },
      "lineNbr": 118,
      "author": {
        "id": 6768
      },
      "writtenOn": "2019-04-03T20:52:05Z",
      "side": 1,
      "message": "correction:\nthe suggested tests do not map 1:1 to use-cases but to behaviors .. the first two are two behaviors for the same use-case",
      "parentUuid": "a06c5c08_7bbb28f6",
      "range": {
        "startLine": 117,
        "startChar": 0,
        "endLine": 118,
        "endChar": 52
      },
      "revId": "19af123176fe13f648acf7de5ff3b74ad28eb5af",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    }
  ]
}