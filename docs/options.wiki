= Wikibase Configuration =

This document describes the configuration of the Wikibase extensions.

As usual, the extension is configured in MediaWiki's LocalSettings.php file. However, Wikibase settings are placed in associative arrays, <code>$wgWBRepoSettings</code> and <code>$wgWBClientSettings</code> respectively, instead of individual global variables. So, if the setting <code>foo</code> is described below, you would need to use <code>$wgWBRepoSettings['foo']</code> or <code>$wgWBClientSettings['foo']</code> in LocalSettings.php.

== Common Settings ==

=== Basic Settings ===

;changesDatabase: The database that changes are recorded to for processing by clients. This must be set to a symbolic database identifier that MediaWiki's LBFactory class understands; <code>false</code> means that the wiki's own database shall be used. '''Note''' that on the client, this setting should usually be the same as the '''repoDatabase''' setting.
;siteLinkGroups: The site groups to use in sitelinks. Must correspond to a value used to give the site group in the MediaWiki <code>sites</code> table. Default is <code>array( 'wikipedia' )</code>. This defines which groups of sites can be linked to Wikibase items.
:'''Note''' that this setting replaces the old ''siteLinkGroup'' setting, which only allowed for a single group.
;specialSiteLinkGroups: This maps one or more site groups into a single "special" group. This is useful if sites from multiple site groups should be shown in a single "special" section on item pages, instead of one section per site group. To show these site-groups you have to add the group "special" to the '''siteLinkGroups''' setting (see above).

=== Expert Settings ===

;sharedCacheKeyPrefix:  Prefix to use for cache keys that should be shared among a wikibase repo and all its clients. The default is constructed from <code>$wgDBname</code> and <code>WBL_VERSION</code>. In order to share caches between clients (and the repo), set a prefix based on the repo's name and <code>WBL_VERSION</code> or a similar version ID.
:'''Note''': The default may change in order to use the repo's database name automatically.
;sharedCacheDuration: The default duration of entries in the shared object cache, in seconds. Default is 3600 seconds (1 hour).
;sharedCacheType: The type of cache to use for the shared object cache. Defaults to <code>$wgMainCacheType</code>. Use <code>CACHE_XXX</code> constants.
;useChangesTable: Whether to record changes in the database, so they can be pushed to clients. Boolean, defaults to <code>true</code>. May be set to <code>false</code> in situations where there are no clients to notify to preserve space.
:'''Note''' that if this is <code>true</code>, the <code>pruneChanges.php</code> script should be run periodically to remove old changes from the database table.
;disabledDataTypes: Array listing of disabled data types on a wiki. This setting is intended to be used in a new Wikibase installation without items yet, or to control deployment of new data types. This setting should be set to the same value in both client and repo settings. Defaults to an empty array.
;maxSerializedEntitySize: The maximum serialized size of entities, in KB. Loading and storing will fail if this size is exceeded. This is intended as a hard limit that prevents very large chunks of data being stored or processed due to abuse or erroneous code. Defaults to MediaWiki core's <code>$wgMaxArticleSize</code> setting.
;geoShapeStorageBaseUrl: Base URL of geo shape storage frontend. Used primarily to build links to the geo shapes. Will be concatenated with the page title, so should end with <code>/</code> or <code>title=</code>. Special characters (e.g. space, percent, etc.) should ''not'' be encoded.
;tabularDataStorageBaseUrl: Base URL of tabular data storage frontend. Used primarily to build links to the tabular data pages. Will be concatenated with the page title, so should end with <code>/</code> or <code>title=</code>. Special characters (e.g. space, percent, etc.) should ''not'' be encoded.
;useTermsTableSearchFields: Whether to use the search-related fields (<code>term_search_key</code> and <code>term_weight</code>) of the <code>wb_terms</code> table. This should not be disabled unless some other search backend is used (see <code>entitySearch</code> below).
;forceWriteTermsTableSearchFields: If true, write search-related fields of the <code>wb_terms</code> table even if they are not used. Useful if you want to experiment with <code>useTermsTableSearchFields</code> and donâ€™t want missed updates in the table.

== Repository Settings ==

=== Basic Settings ===

;entityNamespaces: Defines which kind of entity is managed in which namespace. It is given as an associative array mapping entity types such as <code>'item'</code> to namespace IDs. Mapping must be done for each type of entity that should be supported.
;dataRightsUrl: URL to link to license for data contents. Defaults to <code>$wgRightsUrl</code> setting.
;dataRightsText: Text for data license link. Defaults to <code>$wgRightsText</code> setting.
;sparqlEndpoint: URL to the service description of the SPARQL end point for the repository. Defaults to null, meaning there is no SPARQL endpoint.
;badgeItems: Items allowed to be used as badges. This setting expects an array of serialized item IDs pointing to their CSS class names, like <code>array( 'Q101' => 'wb-badge-goodarticle' )</code>. With this class name it is possible to change the icon of a specific badge.
;preferredPageImagesProperties: List of image property ID strings, in order of preference, that should be considered for the <code>page_image</code> page property. Defaults to an empty array.
;conceptBaseUri: Base URI for building concept URIs (for example used in Rdf output). This has to include the protocol and domain, only an entity identifier will be appended.
;preferredGeoDataProperties: List of properties (by ID string), in order of preference, that are considered when finding primary coordinates for the GeoData extension on an entity. Defaults to an empty array.
;localClientDatabases: An array of locally accessible client databases, for use by the <code>dispatchChanges.php</code> script. This setting determines to which wikis changes are pushed directly. It must be given either as an associative array, mapping global site IDs to logical database names, or, of the database names are the same as the site IDs, as a list of databases. The default is an empty array, indicating no local client databases.
;foreignRepositories: An associative array mapping foreign repository names to settings relevant to the particular repository. Each repository's settings are an associative array containing the following keys:
:;'entityNamespaces': A map of entity type identifiers (strings) that the local wiki supports from the foreign repository to namespaces identifiers (numbers) related to pages of entities of the given type on foreign repository's wiki..
:;'repoDatabase': A symbolic database identifier (string) that MediaWiki's LBFactory class understands.
:;'baseUri': A base URI (string) for concept URIs. It should contain scheme and authority part of the URI.
:;'prefixMapping': A prefix mapping array, see also: docs/foreign-entity-ids.wiki in the DataModel component.

=== Expert Settings ===

;dispatchBatchChunkFactor: Chunk factor used internally by the <code>dispatchChanges.php</code> script. The default is 3. If most clients are not interested in most changes, this factor can be raised to lower the number of database queries needed to fetch a batch of changes.
;dispatchDefaultBatchSize: Overrides the default value for batch-size in dispatchChanges.php
;dispatchDefaultMaxChunks: Overrides the default value for max-chunks in dispatchChanges.php
;dispatchDefaultDispatchInterval: Overrides the default value for dispatch-interval in dispatchChanges.php
;dispatchDefaultDispatchRandomness: Overrides the default value for randomness in dispatchChanges.php
;dispatchMaxTime: Overrides the default value for max-time in dispatchChanges.php
;dispatchIdleDelay: Overrides the default value for idle-delay in dispatchChanges.php
;idBlacklist: A map from entity ID type to a list of IDs to reserve and skip for new entities of that type. IDs are given as integers. For example <code>[ 'item' => [ 1, 2, 3 ] ]</code>.
;multilang-limits: Limits to impose on multilanguage strings like labels, descriptions and such. Supported limits:
:;length: the maximum length of the string, in characters.
:Default: <code>array( 'length' => 250 )</code>.
;urlSchemes: Which URL schemes should be allowed in URL data values. The default is <code>array( 'bzr', 'cvs', 'ftp', 'git', 'http', 'https', 'irc', 'mailto', 'ssh', 'svn' )</code>. Other supported schemes are <code>ftps</code>, <code>ircs</code>, <code>mms</code>, <code>nntp</code>, <code>redis</code>, <code>sftp</code>, <code>telnet</code>, <code>worldwind</code> and <code>gopher</code>. Schemes (protocols) added here will only have any effect if validation is supported for that protocol; that is, adding <code>ftps</code> will work, while adding <code>dummy</code> will do nothing.
;formatterUrlProperty: Property to be used on properties that defines a formatter URL which is used to link external identifiers. The placeholder <code>$1</code> will be replaced by the identifier. Example: On wikidata.org, this is set to <code>P1630</code>, a string property named "formatter URL". When formatting identifiers, each identifiers property page is checked for it's formatter URL (e.g. <code>http://d-nb.info/gnd/$1</code>) specified by the property from this setting.
;canonicalUriProperty: Property to be used on properties that defines a URI pattern which is used to link external identifiers in RDF and other exports. The placeholder <code>$1</code> will be replaced by the identifier. Example: On wikidata.org, this is set to <code>P1921</code>, a string property named "URI used in RDF". When exporting identifiers to RDF or other formats, each identifiers property page is checked for it's URI pattern (e.g. <code>http://d-nb.info/gnd/$1/about/rdf</code>) specified by the property from this setting.
;transformLegacyFormatOnExport: Whether entity revisions stored in a legacy format should be converted on the fly while exporting. Enabled per default.
;allowEntityImport: Allow importing entities via Special:Import and importDump.php. Per default, imports are forbidden, since entities defined in another wiki would have or use IDs that conflict with entities defined locally.
;pagePropertiesRdf: Array that maps between page properties and Wikibase predicates for RDF dumps. Maps from database property name to an array that contains a key <code>'name'</code> (RDF property name, which will be prefixed by <code>wikibase:</code>) and an optional key <code>'type'</code>.
;unitStorage: Definition for unit conversion storage. Should be in in the format <code>ObjectFactory</code> understands, example: <code>array( 'class' => 'Wikibase\\Lib\\JsonUnitStorage',  'args' => array( 'myUnits.json' ) )</code>.
;supportedEntityTypesForEntitiesWithoutTermListings: Array of entity types that are supported on Special:EntitiesWithoutLabel and â€¦Description, typically <code>'item'</code> and <code>'property'</code>. Defaults to <code>null</code>, which enables all numeric entity types.
;dispatchingLockManager: If you want to use another lock mechanism for dispatching changes to clients instead of database locking (which can occupy too many connections to the master database), set its name in this config. See $wgLockManagers documentation in MediaWiki core for more information on configuring a locking mechanism inside core.
;entitySearch: Set of settings controlling how we search for entities. Has following subsettings:
:;useCirrus: boolean|null, whether we should use CirrusSearch extension. Settings marked with (Cirrus) are relevant only when this setting is enabled. If set to null, CirrusSearch is not used unless the request has useCirrus=1. When using CirrusSearch, you can disable the <code>useTermsTableSearchFields</code> setting to save some space in the <code>wb_terms</code> table.
:;prefixSearchProfile: name of the label scoring profile to use for prefix search. The profile should be defined like examples in <code>config/EntityPrefixSearchProfiles.php</code>. (Cirrus)
:;prefixSearchProfiles: Loaded from <code>config/EntityPrefixSearchProfiles.php</code>, does not need to be defined manually. (Cirrus)
:;defaultPrefixRescoreProfile: name of the rescoring profile to use for prefix search. The profile should be defined in <code>config/ElasticSearchRescoreProfiles.php</code>. (Cirrus)
:;fulltextSearchProfile: name of the search profile to use for fulltext search. The profile should be defined like examples in <code>config/EntitySearchProfiles.php</code>. (Cirrus)
:;fulltextSearchProfiles: search profiles to use for fulltext search. (Cirrus)
:;defaultFulltextRescoreProfile: name of the rescoring profile to use for fulltext search. The profile should be defined in <code>config/ElasticSearchRescoreProfiles.php</code>. (Cirrus)
:;rescoreProfiles: Loaded from <code>config/ElasticSearchRescoreProfiles.php</code>, does not have to be defined manually. (Cirrus).
:;statementBoost: Configuration to boost or deboost certain statement values (Cirrus).
:;useStemming: Configuration to use stemming analyzer for descriptions in certain languages. Array of two fields: index - use it for indexing, query - use main text field for querying. (Cirrus)
;searchIndexProperties: Array of properties (by ID string) that should be included in the "statement_keywords" field of the search index. For now, only relevant when Cirrus search is enabled.
;searchIndexTypes: Array of auto-indexed type names. Statements with properties of this type will automatically be indexed in the "statement_keywords" field. For now, only relevant when Cirrus search is enabled.
;searchIndexPropertiesExclude: Array of properties (by ID string) that should be excluded from the "statement_keywords" field. This takes priority over other searchIndex* settings. For now, only relevant when Cirrus search is enabled.
;searchIndexQualifierPropertiesForQuantity: Array of properties (by ID string) that, if used in a qualifier, will be used to write a value to the "statment_quantity" field. For now, only relevant when Cirrus search is enabled.
;disabledRdfExportEntityTypes: Array of entity types that RDF export needs to be disabled for them, default: empty array, meaning nothing is disabled.
;dispatchLagToMaxLagFactor: If set to a positive number, the median dispatch lag (in seconds) will be divided by this number and passed to core like database lag (see the API maxlag parameter). Defaults to 0 (disabled).
;dumpDBDefaultGroup: Default database group to use in dump maintenance scripts, defaults to "dump". Set to <code>null</code> to use the value from <code>$wgDBDefaultGroup</code>.

== Client Settings ==

=== Basic Settings ===

;namespaces: List of namespaces on the client wiki that should have access to repository items. Default: <code>array()</code> (treated as setting is not set, ie. namespaces are enabled).
;excludeNamespaces: List of namespaces on the client wiki to disable wikibase links, etc. for.  Default: <code>array()</code>. Example: <code>array( NS_USER_TALK )</code>.
;repositories: An associative array mapping repository names to settings relevant to the particular repository. Local repository is identified using the empty string as its name. Each repository's settings are an associative array containing the following keys:
:;'entityNamespaces': A map of entity type identifiers (strings) that the local wiki supports from the foreign repository to namespaces identifiers (numbers) related to pages of entities of the given type on foreign repository's wiki..
:;'repoDatabase': A symbolic database identifier (string) that MediaWiki's LBFactory class understands. Note that <code>false</code> would mean "this wiki's database"!
:;'baseUri': A base URI (string) for concept URIs. It should contain scheme and authority part of the URI.
:;'prefixMapping': A prefix mapping array, see also: docs/foreign-entity-ids.wiki in the DataModel component.
;repoUrl: The repository's base URL, including the schema (protocol) and domain; This URL can be protocol-relative. Default is <code>'//wikidata.org'</code>.
:'''Note:''' This may be removed once we can get this information from the sites table.
;repoScriptPath: The repository's script path. Default is $wgScriptPath, assuming that the repo's script path is the same as this wiki's script path.
:'''Note:''' This may be removed once we can get this information from the sites table.
;repoArticlePath: The repository's article path. Default is $wgArticlePath, assuming that the repo's article path is the same as this wiki's script path.
:'''Note:''' This may be removed once we can get this information from the sites table.
;siteGlobalID: This site's global ID (e.g. <code>'itwiki'</code>), as used in the sites table. Default: <code>$wgDBname</code>.
;siteLocalID: This site's local ID resp. language code (e.g. <code>'it'</code>). Default: <code>$wgLanguageCode</code>.
:'''Note:''' This setting will be removed once we can take this information from the sites table.
;siteGroup: This site's site group (e.g. <code>'wikipedia'</code> or <code>'wikivoyage'</code>) as used in the sites table. The setting is optional and falls back to site store lookup. For performance reasons, it may be desireable to set this explicitly to avoid lookups.
;repoSiteId: Site ID of connected repository wiki. Default is to assume client and repo, so this setting defaults to siteGlobalID.
;repoSiteName: Site name of the connected repository wiki. Default is to assume client and repo are same wiki, so defaults to global $wgSitename setting.  If not the same wiki, defaults to 'Wikidata'. This setting can also be set to an i18n message key and will be handled as a message, if the message key exists so that the repo site name can be translatable.
;repoNamespaces: An array telling the client wiki which namespaces on the repository are used for which entity type. This is given as an associative array mapping entity type IDs such as Item::ENTITY_TYPE, to namespace names. This information is used when constructing links to entities on the repository. Default (items in main namespace):
<poem>
          [
              'item' => '',
              'property' => 'Property'
          ]
</poem>
;allowDataTransclusion: Switch to enable data transclusion features like the <code><nowiki>{{#property}}</nowiki></code> parser function and the <tt>wikibase</tt> Scribunto module. Defaults to <code>true</code>.
;allowLocalShortDesc: Switch to enable local override of the central description with <code><nowiki>{{SHORTDESC:}}</nowiki></code>. Defaults to <code>false</code>.
;allowArbitraryDataAccess: Switch to allow accessing arbitrary items from the <tt>wikibase</tt> Scribunto module and the via the parser functions (instead of just the item which is linked to the current page). Defaults to <code>true</code>.
;allowDataAccessInUserLanguage: Switch to allow accessing data in the user's language rather than the content language from the <tt>wikibase</tt> Scribunto module and the via the parser functions. Useful for multilingual wikis: Allows users to split the ParserCache by user language. Defaults to <code>false</code>.
;entityAccessLimit: Limit for the number of different full entities that can be loaded on any given page, via Scribunto or the property parser function. Defaults to 200.
;propagateChangesToRepo: Switch to enable or disable the propagation of client changes to the repo. Defaults to <code>true</code>.
;languageLinkSiteGroup: ID of the site group to be shown as language links. Defaults to <code>null</code>, which means the site's own site group.
;badgeClassNames: A list of additional CSS class names for site links that have badges. The array has to consist of serialized item IDs pointing to their CSS class names, like <code>array( 'Q101' => 'badge-goodarticle' )</code>. Note that this extension does not add any CSS to actually display the badges.
;otherProjectsLinks: Site global ID list of sites which should be linked in the other projects sidebar section. Empty value will suppress this section.
;propertyOrderUrl: URL to use for retrieving the property order used for sorting properties by property ID. Will be ignored if set to null.
;disabledAccessEntityTypes: List of entity types that access to them in the client should be disabled.
;entityUsagePerPageLimit: If a page in client uses too many aspects and entities, Wikibase issues a warning. This setting determines value of that threshold. The default is 100.

=== Expert Settings ===

;injectRecentChanges: Whether changes on the repository should be injected into this wiki's recent changes table, so they show up on watchlists, etc. Requires the <code>dispatchChanges.php</code> script to run, and this wiki to be listed in the <code>localClientDatabases</code> setting on the repository.
;showExternalRecentChanges: Whether changes on the repository should be displayed on Special:RecentChanges, Special:Watchlist, etc on the client wiki. In contrast to <code>injectRecentChanges</code>, this setting just removes the changes from the user interface. The default is <code>false</code>. This is intended to temporarily prevent external changes from showing in order to find or fix some issue on a live site.
;sendEchoNotification: If true, allows users on the client wiki to get a notification when a page they created is connected to a repo item. This requires the Echo extension.
;echoIcon: If <code>sendEchoNotification</code> is set to <code>true</code>, you can also provide what icon the user will see. The correct syntax is <code>[ 'url' => '...' ]</code> or <code>[ 'path' => '...' ]</code> where <code>path</code> is relative to <code>$wgExtensionAssetsPath</code>. Defaults to <code>false</code> which means that there will be the default Echo icon.
;disabledUsageAspects: Array of usage aspects that should not be saved in the <code>wbc_entity_usage</code> table. This supports aspect codes (like "T", "L" or "X"), but not full aspect keys (like "L.de"). For example <code>[ 'D', 'C' ]</code> can be used to disable description and statement usages. Also a replacement usage type can be given in the form of <code>[ 'usage-type-to-replace' => 'replacement' ]</code>.
;fineGrainedLuaTracking: Enable fine grained tracking on entities accessed through Lua in client. No all (X) usage will be recorded, but each aspect will be recorded individually based on actual usage.
;wikiPageUpdaterDbBatchSize: DEPRECATED. If set, acts as a default for purgeCacheBatchSize and recentChangesBatchSize.
;purgeCacheBatchSize: Number of pages to process in each HTMLCacheUpdateJob, a job used to send client wikis notifications about relevant changes to entities. Higher value mean fewer jobs but longer run-time per job. Defaults to wikiPageUpdaterDbBatchSize (for backwards compatibility) or MediaWiki core's $wgUpdateRowsPerJob (which currently defaults to 300).
;recentChangesBatchSize: Number of <code>recentchanges</code> table rows to create in each InjectRCRecordsJob, a job used to send client wikis notifications about relevant changes to entities. Higher value mean fewer jobs but longer run-time per job. Defaults to wikiPageUpdaterDbBatchSize (for backwards compatibility) or MediaWiki core's $wgUpdateRowsPerJob (which currently defaults to 300).
;entityUsageModifierLimits: Associative array mapping usage type to the limit. If number of modifiers for the given aspect of an entity passes this limit, it turns all modifiers to a general entity usage in the given aspect. This is useful when with bad lua, a page in client uses all languages or statements in the repo causing the wbc_entity_usage become too big.
:referencedEntityIdAccessLimit: Maximum number of calls to "mw.wikibase.getReferencedEntityId" allowed on a single page.
;referencedEntityIdMaxDepth: Maximum search depth for referenced entities in "mw.wikibase.getReferencedEntityId".
;referencedEntityIdMaxReferencedEntityVisits: Maximum number of entities to visit in a "mw.wikibase.getReferencedEntityId" call.
