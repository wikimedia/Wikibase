Wikibase Client provides a Lua [[mw:Scribunto|Scribunto]] interface that implements functions to access data from the Wikibase repository, if the Wikibase Client configuration enables <code>allowDataTransclusion</code>. Lua modules and wiki templates can invoke these functions.

== mw.wikibase ==
<code>mw.wikibase</code> has general Lua functionality for working with Wikibase data.

=== mw.wikibase.getEntity ===
<code>wikibase.getEntity()</code><br>
<code>wikibase.getEntity( id )</code><br>
:<span style="color: red;">This function is [[mw:Manual:$wgExpensiveParserFunctionLimit|expensive]] when called with the id of an entity not connected to the current page.</span>

Gets a [[#mw.wikibase.entity|mw.wikibase.entity]] table with data of the Wikibase item requested by id. If no id was given, the item connected to the current page will be returned. Requesting an item by id is only supported if arbitrary access is enabled.

An example call might look like this:
<source lang="lua">
mw.wikibase.getEntity( 'Q42' ) -- Returns a mw.wikibase.entity table for the Item with the id Q42
</source>

=== mw.wikibase.getEntityObject ===
Alias for [[#mw.wikibase.getEntity|mw.wikibase.getEntity]].

=== mw.wikibase.getEntityIdForCurrentPage ===
<code>wikibase.getEntityIdForCurrentPage()</code><br>

Gets the Item id of the item connected to the current page.

An example call might look like this:
<source lang="lua">
mw.wikibase.getEntityIdForCurrentPage() -- Returns the Item id as string, like "Q42"
</source>

== mw.wikibase.getEntityUrl ==
<code>wikibase.getEntityUrl()</code><br>
<code>wikibase.getEntityUrl( id )</code><br>
Takes an item ID and returns the URL to the item in the repo.

If no ID was specified, the URL of the item connected to the current page will be returned, if the page is indeed connected.
An example call might look like this:
<source lang="lua">
mw.wikibase.getEntityUrl( 'Q42' ) -- Returns the URL to the item as a string, like "http://wikidata.org/wiki/Q42".
</source>

=== mw.wikibase.label ===
<code>wikibase.label()</code><br>
<code>wikibase.label( id )</code><br>
Takes an item ID and returns the label in the language of the local Wiki.

If no ID was specified, then the label of the item connected to the current page will be returned, if the page is indeed connected and a label exists in the wiki's language or in a fallback language.

An example call might look like this:
<source lang="lua">
mw.wikibase.label( 'Q42' ) -- Returns the label of the item as a string, like "Berlin".
</source>

=== mw.wikibase.sitelink ===
<code>wikibase.sitelink( id )</code><br>
Takes an item ID and returns the title of the corresponding page title on the local Wiki. This page title can be used to link to the given page.

An example call might look like this:
<source lang="lua">
mw.wikibase.sitelink( 'Q42' ) -- Returns the given item's page title in the current Wiki as a string, like "Berlin".
</source>

=== mw.wikibase.description ===
<code>wikibase.description()</code><br>
<code>wikibase.description( id )</code><br>
Takes an item ID and returns the description in the language of the local Wiki.

If no ID was specified, then the description of the item connected to the current page will be returned, if the page is indeed connected and a description exists in the wiki's language or in a fallback language.

An example call might look like this:
<source lang="lua">
mw.wikibase.description( 'Q42' ) -- Returns the description of the item as a string, like "capital of Germany".
</source>

=== mw.wikibase.renderSnak ===
<code>wikibase.renderSnak( snakSerialization )</code><br>
Renders a serialized Snak to text. This is useful for displaying References or Qualifiers.

An example call might look like this:
<source lang="lua">
local entity = mw.wikibase.getEntityObject()
local snak = entity['claims']['P342'][1]['qualifiers']['P342'][1]

mw.wikibase.renderSnak( snak ) -- Returns the given Snak formatted as wiki text.
</source>

=== mw.wikibase.renderSnaks ===
<code>wikibase.renderSnaks( snaksSerialization )</code><br>
Renders a list of serialized Snaks to text. This is useful for displaying References or Qualifiers.

An example call might look like this:
<source lang="lua">
local entity = mw.wikibase.getEntityObject()
local snaks = entity['claims']['P342'][1]['qualifiers']

mw.wikibase.renderSnaks( snaks ) -- Returns the given Snaks formatted as wiki text.
</source>

=== mw.wikibase.resolvePropertyId ===
<code>wikibase.resolvePropertyId( propertyLabelOrId )</code><br>
Returns a property id for the given label or id. This allows using the property's labels instead of ids in all places. If no property was found for the label, a nil value is returned.

An example call might look like this:
<source lang="lua">
mw.wikibase.resolvePropertyId( 'father' ) -- Returns the property id for the property with label "father", like "P12".
</source>

=== mw.wikibase.getPropertyOrder ===
<code>wikibase.getPropertyOrder()</code><br>
Returns a table with the order of property IDs as provided by the page MediaWiki:Wikibase-SortedProperties. If the page does not exist, a nil value is returned.

An example call might look like this:
<source lang="lua">
mw.wikibase.getPropertyOrder() -- Returns a table with the order of the property IDs such as { ['P1'] = 0, ['P31'] = 1, ['P5'] = 2 }
</source>

=== mw.wikibase.orderProperties ===
<code>wikibase.orderProperties( tableOfPropertyIds )</code><br>
Returns a table with the given property IDs ordered according to the page MediaWiki:Wikibase-SortedProperties.

An example call might look like this:
<source lang="lua">
propertyIds = { 'P1', 'P5', 'P31' }
mw.wikibase.orderProperties( propertyIds ) -- Returns a table with ordered property IDs such as { 'P5', 'P1', 'P31' }
</source>

== mw.wikibase.entity ==
<code>mw.wikibase.entity</code> represents a Wikibase entity in Lua. A <code>mw.wikibase.entity</code> table for the item which is linked with the current page can be obtained with [[#mw.wikibase.getEntityObject|<code>mw.wikibase.getEntityObject</code>]].

Functions documented as <code>mw.wikibase.entity.name</code> are available on the global <code>mw.wikibase.entity</code> table; functions documented as <code>mw.wikibase.entity:name</code> are methods of an <code>mw.wikibase.entity</code> object (see [[#mw.wikibase.entity.create|<code>mw.wikibase.entity.create</code>]]).

=== mw.wikibase.entity:getLabel ===
<code>entity:getLabel()</code><br>
<code>entity:getLabel( langCode )</code><br>
Returns the label of the entity in the language given as <code>langCode</code> or in the Wiki's content language.

An example call might look like this:
<source lang="lua">
entity:getLabel( 'de' ) -- Returns a string, like "Berlin"
</source>

=== mw.wikibase.entity:getSitelink ===
<code>entity:getSitelink()</code><br>
<code>entity:getSitelink( globalSiteId )</code><br>
Get the title with which the entity is linked in the current Wiki. If <code>globalSiteId</code> is given, the title the item is linked with in the given Wiki will be returned.

An example call might look like this:
<source lang="lua">
entity:getSitelink() -- Returns the items page title in the current Wiki as a string, like "Moskow"
entity:getSitelink( 'ruwiki' ) -- Returns the items page title in the Russian Wikipedia as a string, like "Москва"
</source>

=== mw.wikibase.entity:getProperties ===
<code>entity:getProperties()</code><br>
Get a table with all property ids attached to the item.

An example call might look like this:
<source lang="lua">
entity:getProperties() -- Returns a table like: { "P123", "P1337" }
</source>

=== mw.wikibase.entity:getBestStatements ===
<code>entity:getBestStatements( propertyId )</code><br>
Get the best statements with the given property id.
This includes all statements with rank "preferred" or, if no preferred ones exist, all statements with rank "normal".
Statements with rank "deprecated" are never included.

An example call might look like this:
<source lang="lua">
entity:getBestStatements( 'P12' ) -- Returns a table containing the serialization of the best statements with the property id P12
</source>

=== mw.wikibase.entity:formatPropertyValues ===
<code>entity:formatPropertyValues( propertyLabelOrId )</code><br>
<code>entity:formatPropertyValues( propertyLabelOrId, acceptableRanks )</code><br>
Get the formatted value of the claims with the given property (which is either identified by a property id, or by the label of the property). Per default only the best claims will be returned.
Alternatively a table with acceptable ranks can be given as second parameter (a mapping table with all ranks can be found in [[#mw.wikibase.entity.claimRanks|<code>mw.wikibase.entity.claimRanks</code>]]).

An example call might look like this:
<source lang="lua">
-- Return a table like: { value = "Formatted claim value", label = "Label of the Property" }
entity:formatPropertyValues( 'P12' )

-- As above, but uses the label of the Property instead of the id
entity:formatPropertyValues( 'father' )

-- Return the normal ranked claims with the property Id 42 (same format as above)
entity:formatPropertyValues( 'P42', { mw.wikibase.entity.claimRanks.RANK_NORMAL } )
</source>

<code>value</code> is an empty string (<nowiki>''</nowiki>) if there's no statement with the given property on the entity. <code>value</code> will be nil if the given property doesn't exist.

=== mw.wikibase.entity.claimRanks ===
The <code>mw.wikibase.entity.claimRanks</code> table contains a map of all available claim ranks.

The available ranks are:
# RANK_TRUTH
# RANK_PREFERRED
# RANK_NORMAL
# RANK_DEPRECATED

This can for example be used like this:
<source lang="lua">
-- Return the normal ranked claims with the property id P5
entity:formatPropertyValues( 'P5', { mw.wikibase.entity.claimRanks.RANK_NORMAL } )

 -- Return all claims with id P123 (as the table passed contains all possible claim ranks)
entity:formatPropertyValues( 'P123', mw.wikibase.entity.claimRanks )
</source>
