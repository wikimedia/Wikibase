{
  "comments": [
    {
      "key": {
        "uuid": "37ff8637_c37212f0",
        "filename": "lib/includes/SimpleWANObjectCache.php",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 106
      },
      "writtenOn": "2018-07-11T10:00:49Z",
      "side": 1,
      "message": "This class hides lots of what is happening internally in WANObjectCache, it might be an idea to at least say in the class comment that it is a complex beast and that there will be unexpected things that may happen while using this simple interface, for example deleting and key and trying to set a new key straight away etc will do odd things.",
      "range": {
        "startLine": 12,
        "startChar": 6,
        "endLine": 12,
        "endChar": 26
      },
      "revId": "91c4970e9416af2ac35f9d9f8fa80fbd919faa7f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f4fad2da_18bad40c",
        "filename": "lib/includes/SimpleWANObjectCache.php",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 4089
      },
      "writtenOn": "2018-07-11T11:31:28Z",
      "side": 1,
      "message": "If what you wrote is true, then would it be a good idea to just remove this implementation and not use `WANObjectCache` at all?",
      "parentUuid": "37ff8637_c37212f0",
      "range": {
        "startLine": 12,
        "startChar": 6,
        "endLine": 12,
        "endChar": 26
      },
      "revId": "91c4970e9416af2ac35f9d9f8fa80fbd919faa7f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e200cbb8_e39896fe",
        "filename": "lib/includes/SimpleWANObjectCache.php",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 2626
      },
      "writtenOn": "2018-07-16T12:15:22Z",
      "side": 1,
      "message": "Right, do we really need to decorate WANObjectCache? Is it ever used in Wikibase?\n\nWhat are the odd things you referred to Addshore?\nAsking as I don\u0027t know WANObjectCache, and it is a really mysterious creature to me. Im not even sure what\u0027s allowed and what\u0027s not.",
      "parentUuid": "f4fad2da_18bad40c",
      "range": {
        "startLine": 12,
        "startChar": 6,
        "endLine": 12,
        "endChar": 26
      },
      "revId": "91c4970e9416af2ac35f9d9f8fa80fbd919faa7f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9860afce_44052d16",
        "filename": "lib/includes/SimpleWANObjectCache.php",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 16
      },
      "writtenOn": "2018-07-16T13:03:24Z",
      "side": 1,
      "message": "I don\u0027t recommend trying to wrap WANObjectCache behind a simple key/value interface like this, since it will indeed due confusing things that go against the interface contract (e.g. tombstones). Even with the hold-offs set to 0 seconds, there would still be the awkwardness that set() does not have to apply in all datacenters but delete() does. I suppose the proxy\u0027s delete() could wrap reap() to be more consistent in that regard.\n\nPart of the contract for BagOStuff/WANObjectCache is in the class itself and part in the factory method or service that yields such objects, e.g. getLocalClusterCache(). I suppose that same would hold with PSR-16 (\"An instance of CacheInterface corresponds to a single collection of cache items with a single key namespace\" is not that specific). This means delete()/set() have the same caveats as BagOStuff, so I suppose it\u0027s no worse in that regard.\n\nSo, it could perhaps be hacked up to work, but all the use-case advantages of WAN cache go away, in which case one may as well use PSR-16 or BagOStuff directly IMO.",
      "parentUuid": "e200cbb8_e39896fe",
      "range": {
        "startLine": 12,
        "startChar": 6,
        "endLine": 12,
        "endChar": 26
      },
      "revId": "91c4970e9416af2ac35f9d9f8fa80fbd919faa7f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5d3dfde3_842ca565",
        "filename": "lib/includes/SimpleWANObjectCache.php",
        "patchSetId": 3
      },
      "lineNbr": 120,
      "author": {
        "id": 106
      },
      "writtenOn": "2018-07-11T10:00:49Z",
      "side": 1,
      "message": "This looks the same as the other interface, could reuse code, but not really needed, but we can use traits now..",
      "range": {
        "startLine": 103,
        "startChar": 1,
        "endLine": 120,
        "endChar": 2
      },
      "revId": "91c4970e9416af2ac35f9d9f8fa80fbd919faa7f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76356179_55615ce9",
        "filename": "lib/includes/SimpleWANObjectCache.php",
        "patchSetId": 3
      },
      "lineNbr": 120,
      "author": {
        "id": 2626
      },
      "writtenOn": "2018-07-16T12:15:22Z",
      "side": 1,
      "message": "Yup, I intentionally copied it to hear from reviewers.\n\nCould be done right away. But how about moving this out to trait/whetever in a separate patch?\nWith the pattern in mind: first have duplication, then remove it.",
      "parentUuid": "5d3dfde3_842ca565",
      "range": {
        "startLine": 103,
        "startChar": 1,
        "endLine": 120,
        "endChar": 2
      },
      "revId": "91c4970e9416af2ac35f9d9f8fa80fbd919faa7f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b963c0c5_d4366ed4",
        "filename": "lib/includes/SimpleWANObjectCache.php",
        "patchSetId": 3
      },
      "lineNbr": 164,
      "author": {
        "id": 2626
      },
      "writtenOn": "2018-07-03T11:17:50Z",
      "side": 1,
      "message": "This is 100% evil. Not sure how this should be handled to be honest.\n\nIf I get it right, PSR 16 understands TTL as amount of seconds from the point in time the thing was added to cache. Therefore TTL 0 means \"should expire immediately\". If I interpret php docs in WANObjectCache, this what $ttl is about there as well, although 0 means \"never expire\" there. To make things worse, BagOStuff, which WANObjectCache uses kinda internally actually uses expiration timestamp as TTL. And there zero is also special symbol for \"never expire\".\nIt seems if PSR-16 TTL was the amount of seconds added to \"now\" and passed down to inner WANObjectCache here, that would somehow work, because of the way WANObjectCache currently passes the value to BagOStuff. OTOH, it seems not right given that WANObjectCache claims to expect amount of second, not the timestamp.\n\nWhat to do about it?",
      "revId": "91c4970e9416af2ac35f9d9f8fa80fbd919faa7f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "db1369fb_59747d12",
        "filename": "lib/includes/SimpleWANObjectCache.php",
        "patchSetId": 3
      },
      "lineNbr": 164,
      "author": {
        "id": 4089
      },
      "writtenOn": "2018-07-10T15:16:50Z",
      "side": 1,
      "message": "If this awesome hack works, I suggest to leave it as is.",
      "parentUuid": "b963c0c5_d4366ed4",
      "revId": "91c4970e9416af2ac35f9d9f8fa80fbd919faa7f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e364324_233afd43",
        "filename": "lib/includes/SimpleWANObjectCache.php",
        "patchSetId": 3
      },
      "lineNbr": 164,
      "author": {
        "id": 106
      },
      "writtenOn": "2018-07-11T10:00:49Z",
      "side": 1,
      "message": "See WANObjectCache::TTL_UNCACHEABLE ?\n/* Idiom for getWithSetCallback() callbacks to avoid calling set() */\nBut it looks like that is only used in getWithSetCallback right now.\nIt could be added to set too?\n\n0.00000001 is indeed a nasty hack and I\u0027m not sure which code path it would end up taking, Aaron should definitely review this.",
      "parentUuid": "db1369fb_59747d12",
      "revId": "91c4970e9416af2ac35f9d9f8fa80fbd919faa7f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}