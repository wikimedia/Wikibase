{
  "comments": [
    {
      "key": {
        "uuid": "030c1604_06ef42e3",
        "filename": "repo/RepoHooks.php",
        "patchSetId": 5
      },
      "lineNbr": 1196,
      "author": {
        "id": 2638
      },
      "writtenOn": "2018-06-26T16:53:58Z",
      "side": 1,
      "message": "not a big deal but generally we separate indexing patch from patch that enable reading on a new field.\nI don\u0027t think that the term_freq query can generate elastic errors if applied on a non indexed field.\nWe should at least avoid communicating on it before we properly reindexed wikidata.",
      "revId": "4bf7e11e0baad3eaefbe8a5062bea500efdadd74",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03d1f71a_4826e0f6",
        "filename": "repo/includes/Search/Elastic/Query/WbStatementQuantityFeature.php",
        "patchSetId": 5
      },
      "lineNbr": 89,
      "author": {
        "id": 2638
      },
      "writtenOn": "2018-06-26T16:53:58Z",
      "side": 1,
      "message": "nitpick: I\u0027m not used to see spaces around array keys",
      "range": {
        "startLine": 89,
        "startChar": 22,
        "endLine": 89,
        "endChar": 23
      },
      "revId": "4bf7e11e0baad3eaefbe8a5062bea500efdadd74",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db20232d_882f9367",
        "filename": "repo/includes/Search/Elastic/Query/WbStatementQuantityFeature.php",
        "patchSetId": 5
      },
      "lineNbr": 131,
      "author": {
        "id": 2638
      },
      "writtenOn": "2018-06-26T16:53:58Z",
      "side": 1,
      "message": "should this be extracted as a var outside this loop to avoid reconstructing it on every iteration?",
      "range": {
        "startLine": 131,
        "startChar": 20,
        "endLine": 131,
        "endChar": 39
      },
      "revId": "4bf7e11e0baad3eaefbe8a5062bea500efdadd74",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b28e7a2c_105a06cf",
        "filename": "repo/includes/Search/Elastic/Query/WbStatementQuantityFeature.php",
        "patchSetId": 5
      },
      "lineNbr": 134,
      "author": {
        "id": 2638
      },
      "writtenOn": "2018-06-26T16:53:58Z",
      "side": 1,
      "message": "I\u0027d cast to (int) here",
      "revId": "4bf7e11e0baad3eaefbe8a5062bea500efdadd74",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1eca34aa_fe05080b",
        "filename": "repo/includes/Search/Elastic/Query/WbStatementQuantityFeature.php",
        "patchSetId": 5
      },
      "lineNbr": 156,
      "author": {
        "id": 2638
      },
      "writtenOn": "2018-06-26T16:53:58Z",
      "side": 1,
      "message": "this looks complex, is it just to extract \"P[1-9]\\d{0,9}\\z\" ?\nwhy not just modify PropertyId and add a new constant such that:\n\t\n        const INNER_PATTERN \u003d \u0027P[1-9]\\d{0,9}\\z\u0027;\n\n\t/**\n\t * @since 0.5\n\t */\n\tconst PATTERN \u003d \u0027/^\u0027 . self::INNER_PATTERN . \u0027/i\u0027;\n\nand then use INNER_PATTERN here?",
      "revId": "4bf7e11e0baad3eaefbe8a5062bea500efdadd74",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a81dbdb_45075258",
        "filename": "repo/includes/Search/Elastic/Query/WbStatementQuantityFeature.php",
        "patchSetId": 5
      },
      "lineNbr": 160,
      "author": {
        "id": 2638
      },
      "writtenOn": "2018-06-26T16:53:58Z",
      "side": 1,
      "message": "nitpick, I think P can be removed (?\u003cname\u003ePATTERN) is equivalent",
      "range": {
        "startLine": 160,
        "startChar": 25,
        "endLine": 160,
        "endChar": 26
      },
      "revId": "4bf7e11e0baad3eaefbe8a5062bea500efdadd74",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d56e80ff_2f510762",
        "filename": "repo/includes/Search/Elastic/Query/WbStatementQuantityFeature.php",
        "patchSetId": 5
      },
      "lineNbr": 162,
      "author": {
        "id": 2638
      },
      "writtenOn": "2018-06-26T16:53:58Z",
      "side": 1,
      "message": "this should probably be escaped using preg_quote ?",
      "range": {
        "startLine": 162,
        "startChar": 45,
        "endLine": 162,
        "endChar": 68
      },
      "revId": "4bf7e11e0baad3eaefbe8a5062bea500efdadd74",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eda4798c_0c69e4f3",
        "filename": "repo/includes/Search/Elastic/Query/WbStatementQuantityFeature.php",
        "patchSetId": 5
      },
      "lineNbr": 165,
      "author": {
        "id": 2638
      },
      "writtenOn": "2018-06-26T16:53:58Z",
      "side": 1,
      "message": "should this be escaped using preg_quote as well?",
      "range": {
        "startLine": 165,
        "startChar": 3,
        "endLine": 165,
        "endChar": 39
      },
      "revId": "4bf7e11e0baad3eaefbe8a5062bea500efdadd74",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07f6d182_09045c64",
        "filename": "repo/includes/Search/Elastic/Query/WbStatementQuantityFeature.php",
        "patchSetId": 5
      },
      "lineNbr": 166,
      "author": {
        "id": 2638
      },
      "writtenOn": "2018-06-26T16:53:58Z",
      "side": 1,
      "message": "instead of relying on non greedy could you use [^\u003c\u003e\u003d]+ and drop the /U modifier\nalso is it expected that you accept empty strings here?",
      "range": {
        "startLine": 166,
        "startChar": 4,
        "endLine": 166,
        "endChar": 6
      },
      "revId": "4bf7e11e0baad3eaefbe8a5062bea500efdadd74",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b902e48_4d0c3e3d",
        "filename": "repo/includes/Search/Elastic/Query/WbStatementQuantityFeature.php",
        "patchSetId": 5
      },
      "lineNbr": 170,
      "author": {
        "id": 2638
      },
      "writtenOn": "2018-06-26T16:53:58Z",
      "side": 1,
      "message": "nitpick: I think some example values that this pattern is supposed to parse as code comment would help future readers I think.",
      "revId": "4bf7e11e0baad3eaefbe8a5062bea500efdadd74",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    }
  ]
}