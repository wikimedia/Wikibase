{
  "comments": [
    {
      "key": {
        "uuid": "4e7eab26_2207cc20",
        "filename": "repo/includes/Rdf/RdfVocabulary.php",
        "patchSetId": 7
      },
      "lineNbr": 95,
      "author": {
        "id": 128
      },
      "writtenOn": "2017-09-12T19:02:13Z",
      "side": 1,
      "message": "PropertyRdfBuilder::writePropertyPredicates needs to declare these normalized predicates.",
      "revId": "5a13474fc4bdd6cad50a72b32352bb8742deef7a",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e7eab26_bc2e7bf5",
        "filename": "repo/includes/Rdf/RdfVocabulary.php",
        "patchSetId": 7
      },
      "lineNbr": 95,
      "author": {
        "id": 920
      },
      "writtenOn": "2017-09-13T10:55:00Z",
      "side": 1,
      "message": "All of them except one were already defined, added the one but maybe we should define a complete new set of predicates?",
      "parentUuid": "4e7eab26_2207cc20",
      "revId": "5a13474fc4bdd6cad50a72b32352bb8742deef7a",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e7eab26_4c61e6cf",
        "filename": "repo/includes/Rdf/RdfVocabulary.php",
        "patchSetId": 7
      },
      "lineNbr": 95,
      "author": {
        "id": 128
      },
      "writtenOn": "2017-09-13T14:48:16Z",
      "side": 1,
      "message": "That question exactly is why i stopped working on this. I don\u0027t know.",
      "parentUuid": "4e7eab26_bc2e7bf5",
      "revId": "5a13474fc4bdd6cad50a72b32352bb8742deef7a",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e7eab26_ac9e4abb",
        "filename": "repo/includes/Rdf/RdfVocabulary.php",
        "patchSetId": 7
      },
      "lineNbr": 98,
      "author": {
        "id": 128
      },
      "writtenOn": "2017-09-13T14:48:16Z",
      "side": 1,
      "message": "Wait, NSP_QUALIFIER_VALUE and NSP_QUALIFIER both map to  NSP_QUALIFIER_VALUE_NORM? That can\u0027t be right, can it?\n\nTo be honest, I get confused about the RDF mapping myself. Can you get input from Stas and Lucas on this?",
      "revId": "5a13474fc4bdd6cad50a72b32352bb8742deef7a",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e7eab26_4c19e626",
        "filename": "repo/includes/Rdf/RdfVocabulary.php",
        "patchSetId": 7
      },
      "lineNbr": 98,
      "author": {
        "id": 4699
      },
      "writtenOn": "2017-09-13T15:04:56Z",
      "side": 1,
      "message": "I’m confused too, but I think this seems to be blurring the distinction between simple values and full values (aka deep values, apparently).\n\nFor value types with a full value representation (globecoordinate, quantity, time), psv: and psn: both map to full value nodes, and for value types with only a simple value representation, there is no psv: triple, and, so far, no psn: triple either because only quantities could be normalized.\n\nBut with this change, psn: could link to both simple values (external identifiers) and full values (quantities), and in the case of external identifiers there would be psn: triples but no psv: triples. That doesn’t feel right to me.\n\nPerhaps we should introduce full value nodes for external identifiers, with the property, prefix, identifier, and full URI as triples on that node?",
      "parentUuid": "4e7eab26_ac9e4abb",
      "revId": "5a13474fc4bdd6cad50a72b32352bb8742deef7a",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e7eab26_0cbafe1e",
        "filename": "repo/includes/Rdf/RdfVocabulary.php",
        "patchSetId": 7
      },
      "lineNbr": 99,
      "author": {
        "id": 128
      },
      "writtenOn": "2017-09-13T14:48:16Z",
      "side": 1,
      "message": "Same here - NSP_REFERENCE_VALUE and NSP_REFERENCE both map to  NSP_REFERENCE_VALUE_NORM? That does not seem right. Don\u0027t we need NSP_REFERENCE_NORM?",
      "revId": "5a13474fc4bdd6cad50a72b32352bb8742deef7a",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e7eab26_a5098631",
        "filename": "repo/includes/Rdf/Values/ExternalIdentifierRdfBuilder.php",
        "patchSetId": 7
      },
      "lineNbr": 65,
      "author": {
        "id": 128
      },
      "writtenOn": "2017-09-12T19:02:13Z",
      "side": 1,
      "message": "$normalizedPropertyValueNamespace, or $propertyValueNamespaceNormalized\n\nAlso: would be nice to have a method for getting the normalized predicate LName. Otoh, this is a performance hotspot, and we may want to avid the extra function call.",
      "revId": "5a13474fc4bdd6cad50a72b32352bb8742deef7a",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e7eab26_dc33475e",
        "filename": "repo/includes/Rdf/Values/ExternalIdentifierRdfBuilder.php",
        "patchSetId": 7
      },
      "lineNbr": 65,
      "author": {
        "id": 920
      },
      "writtenOn": "2017-09-13T10:55:00Z",
      "side": 1,
      "message": "I\u0027m worried about the performance.",
      "parentUuid": "4e7eab26_a5098631",
      "revId": "5a13474fc4bdd6cad50a72b32352bb8742deef7a",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e7eab26_2544b649",
        "filename": "repo/includes/Rdf/Values/ExternalIdentifierRdfBuilder.php",
        "patchSetId": 7
      },
      "lineNbr": 67,
      "author": {
        "id": 128
      },
      "writtenOn": "2017-09-12T19:02:13Z",
      "side": 1,
      "message": "Could be done inside RdfVocabulary, if we don\u0027t mind the extra function call.",
      "revId": "5a13474fc4bdd6cad50a72b32352bb8742deef7a",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}