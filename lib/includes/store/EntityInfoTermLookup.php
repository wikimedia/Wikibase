<?php

namespace Wikibase\Lib\Store;

use OutOfBoundsException;
use Wikibase\DataModel\Entity\EntityId;

/**
 * TermLookup based on plain array data structures.
 * This allows term lookups to be performed directly on prefetched data,
 * such as the data structured generated by EntityInfoBuilder.
 *
 * @see EntityInfoBuilder
 *
 * @since 0.5
 *
 * @licence GNU GPL v2+
 * @author Daniel Kinzler
 */
class EntityInfoTermLookup implements TermLookup {

	/**
	 * @var array
	 */
	private $entityRecords;

	/**
	 * @param array $entityRecords A array of entity records, as returned
	 * by EntityInfoBuilder::getEntityInfo.
	 */
	function __construct( array $entityRecords ) {
		$this->entityRecords = $entityRecords;
	}

	/**
	 * @param EntityId $entityId
	 * @param $field
	 * @param $languageCode
	 *
	 * @return string|null
	 * @throws OutOfBoundsException
	 */
	private function getValue( EntityId $entityId, $field, $languageCode ) {
		$id = $entityId->getSerialization();

		if ( !isset( $this->entityRecords[$id] ) ) {
			throw new OutOfBoundsException( 'No terms known for entity ' . $id );
		}

		if ( !isset( $this->entityRecords[$id][$field] ) ) {
			throw new OutOfBoundsException( 'No ' . $field . ' known for entity ' . $id );
		}

		if ( !isset( $this->entityRecords[$id][$field][$languageCode] ) ) {
			throw new OutOfBoundsException( 'No ' . $field . ' known in ' . $languageCode . ' for entity ' . $id );
		}

		$value = $this->entityRecords[$id][$field][$languageCode];

		if ( is_array( $value ) ) {
			// $value may be a record with "language" and "value" fields.
			$value = $value['value'];
		}

		return $value;
	}

	/**
	 * @param EntityId $entityId
	 * @param $field
	 *
	 * @return string[]
	 */
	private function getValuesByLanguage( EntityId $entityId, $field ) {
		$id = $entityId->getSerialization();

		if ( !isset( $this->entityRecords[$id] ) ) {
			return array();
		}

		if ( !isset( $this->entityRecords[$id][$field] ) ) {
			return array();
		}

		$values = array();

		foreach ( $this->entityRecords[$id][$field] as $languageCode => $value ) {
			if ( is_array( $value ) ) {
				// $value may be a record with "language" and "value" fields.
				$value = $value['value'];
			}

			$values[$languageCode] = $value;
		}

		return $values;
	}

	/**
	 * Gets the label of an Entity with the specified EntityId and language code.
	 *
	 * @param EntityId $entityId
	 * @param string $languageCode
	 *
	 * @return string
	 */
	public function getLabel( EntityId $entityId, $languageCode ) {
		return $this->getValue( $entityId, 'labels', $languageCode );
	}

	/**
	 * Gets all labels of an Entity with the specified EntityId.
	 *
	 * @param EntityId $entityId
	 *
	 * @return string[]
	 */
	public function getLabels( EntityId $entityId ) {
		return $this->getValuesByLanguage( $entityId, 'labels' );
	}

	/**
	 * Gets the description of an Entity with the specified EntityId and language code.
	 *
	 * @param EntityId $entityId
	 * @param string $languageCode
	 *
	 * @return string
	 */
	public function getDescription( EntityId $entityId, $languageCode ) {
		return $this->getValue( $entityId, 'descriptions', $languageCode );
	}

	/**
	 * Gets all descriptions of an Entity with the specified EntityId.
	 *
	 * @param EntityId $entityId
	 *
	 * @return string[]
	 */
	public function getDescriptions( EntityId $entityId ) {
		return $this->getValuesByLanguage( $entityId, 'descriptions' );
	}

}
