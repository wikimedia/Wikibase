<?php

namespace Wikibase\Lib\Store;

use Wikibase\DataModel\Entity\EntityId;

/**
 * A wrapper for a simple array structure representing pre-fetched data about entities.
 *
 * The entity info is represented by a nested array structure. On the top level,
 * entity id strings are used as keys that refer to entity "records".
 *
 * Each record is an associative array with at least the fields "id" and "type".
 * Which other fields are present depends on which methods have been called on
 * the EntityInfoBuilder in order to gather information about the entities.
 *
 * The array structure should be compatible with the structure generated by
 * EntitySerializer and related classes. It should be suitable for serialization,
 * and must thus not contain any objects.
 *
 * @see EntityInfoBuilder
 *
 * @since 0.5
 *
 * @licence GNU GPL v2+
 * @author Daniel Kinzler
 */
class EntityInfo {

	/**
	 * @var array
	 */
	private $info;

	/**
	 * @param array $info An array of entity info records conformin to the structure
	 */
	public function __construct( array $info ) {
		$this->info = $info;
	}

	/**
	 * Returns the array of entity info records contained in this EntityInfo object.
	 * See the class level documentation for information about the structure of this array.
	 *
	 * @return array
	 */
	public function asArray() {
		return $this->info;
	}

	/**
	 * @param EntityId $id
	 *
	 * @return bool
	 */
	public function hasEntityInfo( EntityId $id ) {
		$key = $id->getSerialization();

		return isset( $this->info[$key] );
	}

	/**
	 * @param EntityId $id
	 *
	 * @return array An array structure representing information about the given entity.
	 *         If that entity isn't know, the resulting structure will contain only the ID.
	 */
	public function getEntityInfo( EntityId $id ) {
		$key = $id->getSerialization();

		if ( isset( $this->info[$key] ) ) {
			return $this->info[$key];
		} else {
			return array( 'id' => $key );
		}
	}

	/**
	 * @param EntityId $id
	 * @param string $languageCode
	 *
	 * @return string|null The label, or null if no such label is known.
	 */
	public function getLabel( EntityId $id, $languageCode ) {
		$entityInfo = $this->getEntityInfo( $id );

		if ( !isset( $entityInfo['labels'] ) ) {
			return null;
		}

		if ( !isset( $entityInfo['labels'][$languageCode] ) ) {
			return null;
		}

		return $entityInfo['labels'][$languageCode];
	}

}
