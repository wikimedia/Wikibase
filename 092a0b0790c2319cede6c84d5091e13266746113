{
  "comments": [
    {
      "key": {
        "uuid": "2f3817e2_d3dc59f6",
        "filename": "docs/adr/0002-CacheAwarePropertyInfoStore-caching.md",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 4699
      },
      "writtenOn": "2018-12-23T22:18:19Z",
      "side": 1,
      "message": "Do we specify which Markdown flavor our ADRs use? The original Markdown implementation would cause this to result in an emphasized “property” word (surrounded by “wb” and “info” with no visible separator), whereas in CommonMark it’s a single word [1], “wb_property_info” (as intended).\n\nThe safest option would be to wrap this in backticks, which would look good anyways IMHO.\n\n[1]: https://spec.commonmark.org/0.28/#example-341",
      "range": {
        "startLine": 11,
        "startChar": 42,
        "endLine": 11,
        "endChar": 58
      },
      "revId": "092a0b0790c2319cede6c84d5091e13266746113",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6209eaa_51bedb44",
        "filename": "docs/adr/0002-CacheAwarePropertyInfoStore-caching.md",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 106
      },
      "writtenOn": "2019-01-03T11:52:13Z",
      "side": 1,
      "message": "I don\u0027t think we have ever specified which markdown flavour to use.\nI have wrapped this in ` now",
      "parentUuid": "2f3817e2_d3dc59f6",
      "range": {
        "startLine": 11,
        "startChar": 42,
        "endLine": 11,
        "endChar": 58
      },
      "revId": "092a0b0790c2319cede6c84d5091e13266746113",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d92bcf30_63c2fed6",
        "filename": "docs/adr/0002-CacheAwarePropertyInfoStore-caching.md",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 50
      },
      "writtenOn": "2018-12-27T21:37:06Z",
      "side": 1,
      "message": "I think this is a little unclear… this suggests that the caching is being done in PHP itself solely, thus doesn\u0027t persist between web requests (which we also do, but that\u0027s not what this touches)",
      "range": {
        "startLine": 22,
        "startChar": 23,
        "endLine": 22,
        "endChar": 45
      },
      "revId": "092a0b0790c2319cede6c84d5091e13266746113",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "615f5969_23ed46b8",
        "filename": "docs/adr/0002-CacheAwarePropertyInfoStore-caching.md",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 106
      },
      "writtenOn": "2019-01-03T11:52:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d92bcf30_63c2fed6",
      "range": {
        "startLine": 22,
        "startChar": 23,
        "endLine": 22,
        "endChar": 45
      },
      "revId": "092a0b0790c2319cede6c84d5091e13266746113",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11ceec70_e0d3c871",
        "filename": "docs/adr/0002-CacheAwarePropertyInfoStore-caching.md",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 5121
      },
      "writtenOn": "2018-12-20T12:17:31Z",
      "side": 1,
      "message": "\"by\"",
      "range": {
        "startLine": 23,
        "startChar": 35,
        "endLine": 23,
        "endChar": 38
      },
      "revId": "092a0b0790c2319cede6c84d5091e13266746113",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "158f9c2d_0534a4d3",
        "filename": "docs/adr/0002-CacheAwarePropertyInfoStore-caching.md",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 106
      },
      "writtenOn": "2018-12-20T12:23:32Z",
      "side": 1,
      "message": "Will fix",
      "parentUuid": "11ceec70_e0d3c871",
      "range": {
        "startLine": 23,
        "startChar": 35,
        "endLine": 23,
        "endChar": 38
      },
      "revId": "092a0b0790c2319cede6c84d5091e13266746113",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1de3f0b_d71b53b0",
        "filename": "docs/adr/0002-CacheAwarePropertyInfoStore-caching.md",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 106
      },
      "writtenOn": "2019-01-03T11:52:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "158f9c2d_0534a4d3",
      "range": {
        "startLine": 23,
        "startChar": 35,
        "endLine": 23,
        "endChar": 38
      },
      "revId": "092a0b0790c2319cede6c84d5091e13266746113",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e282da5c_98eb97d1",
        "filename": "docs/adr/0002-CacheAwarePropertyInfoStore-caching.md",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 50
      },
      "writtenOn": "2018-12-27T21:37:06Z",
      "side": 1,
      "message": "Do we maybe want to mention here why this was done (presumably because it was a trivial code change and we already do this in other places)?",
      "revId": "092a0b0790c2319cede6c84d5091e13266746113",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75b3f404_501efc31",
        "filename": "docs/adr/0002-CacheAwarePropertyInfoStore-caching.md",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 106
      },
      "writtenOn": "2019-01-03T11:52:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e282da5c_98eb97d1",
      "revId": "092a0b0790c2319cede6c84d5091e13266746113",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7c121d4_cb498cf4",
        "filename": "docs/adr/0002-CacheAwarePropertyInfoStore-caching.md",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 5121
      },
      "writtenOn": "2018-12-20T12:17:31Z",
      "side": 1,
      "message": "Are there no scenarios whatsoever where this would be unacceptable? Like (completely hypothetical) validation based on its value right after a change?",
      "range": {
        "startLine": 28,
        "startChar": 38,
        "endLine": 28,
        "endChar": 110
      },
      "revId": "092a0b0790c2319cede6c84d5091e13266746113",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "725bbcd6_80a8919c",
        "filename": "docs/adr/0002-CacheAwarePropertyInfoStore-caching.md",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 106
      },
      "writtenOn": "2018-12-20T12:23:32Z",
      "side": 1,
      "message": "So the table doesn\u0027t include info about constraints or anything used for validation.\nThe things held are property ID, type, and the formatterUrl.\nEven if these are a few minutes out of date we won\u0027t hit any issues.\nThe creation is the case to think about the most as if a user creates a property, they may not be able to fully use it for the short amount of time the data is cached on the app server. But again this is low risk as the property creation process is slow and well controlled and properties are generally not used immediately after being created.",
      "parentUuid": "b7c121d4_cb498cf4",
      "range": {
        "startLine": 28,
        "startChar": 38,
        "endLine": 28,
        "endChar": 110
      },
      "revId": "092a0b0790c2319cede6c84d5091e13266746113",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c6c09ab_734d1449",
        "filename": "docs/adr/0002-CacheAwarePropertyInfoStore-caching.md",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 4699
      },
      "writtenOn": "2018-12-23T22:18:19Z",
      "side": 1,
      "message": "Well, the property creator typically imports usage examples from the property proposal to the property once it’s been created, I believe, which includes using that property (usually as a qualifier).",
      "parentUuid": "725bbcd6_80a8919c",
      "range": {
        "startLine": 28,
        "startChar": 38,
        "endLine": 28,
        "endChar": 110
      },
      "revId": "092a0b0790c2319cede6c84d5091e13266746113",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1e22cde_cba2d5b4",
        "filename": "docs/adr/0002-CacheAwarePropertyInfoStore-caching.md",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 50
      },
      "writtenOn": "2018-12-27T21:37:06Z",
      "side": 1,
      "message": "I guess this also means that newly deleted properties can still be used when creating new statements… but that should be a negligible problem also (properties are usually only deleted once they are basically unused)",
      "parentUuid": "8c6c09ab_734d1449",
      "range": {
        "startLine": 28,
        "startChar": 38,
        "endLine": 28,
        "endChar": 110
      },
      "revId": "092a0b0790c2319cede6c84d5091e13266746113",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d0a8776_6b1b21fd",
        "filename": "docs/adr/0002-CacheAwarePropertyInfoStore-caching.md",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 106
      },
      "writtenOn": "2019-01-03T11:52:13Z",
      "side": 1,
      "message": "Lookups for property existence afaik do not use this info store or table.\nThe data type lookup for a property will go through this table\n\nIt sounds like people could run into the edge case in the situation that lucas described.\nHowever because of the entropy on a large system such as wikidata I doubt they would move fast enough to actually get there.\nAnd on a small system (1 server) the cache purging doesn\u0027t need to happen as the cache will already be updated.",
      "parentUuid": "b1e22cde_cba2d5b4",
      "range": {
        "startLine": 28,
        "startChar": 38,
        "endLine": 28,
        "endChar": 110
      },
      "revId": "092a0b0790c2319cede6c84d5091e13266746113",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "93e036f3_5bafb64d",
        "filename": "docs/adr/0002-CacheAwarePropertyInfoStore-caching.md",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 4699
      },
      "writtenOn": "2018-12-23T22:18:19Z",
      "side": 1,
      "message": "I would definitely support this option – we could still add an in-process cache to this, too, and it wouldn’t suffer from being stale as much as the all-properties-at-once cache does (since property type *changes* are extremely rare, and using outdated formatter URLs doesn’t matter as much because we don’t even bother purging pages using old formatter URLs from Varnish).\n\nPerhaps an explanation could be added to the ADR why this option was not implemented right away? It seems more natural to me than the additional in-process cache. (My guess would be that the in-process cache was chosen because it it a simpler code change.)",
      "range": {
        "startLine": 35,
        "startChar": 1,
        "endLine": 35,
        "endChar": 34
      },
      "revId": "092a0b0790c2319cede6c84d5091e13266746113",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cce92185_2553365a",
        "filename": "docs/adr/0002-CacheAwarePropertyInfoStore-caching.md",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 106
      },
      "writtenOn": "2019-01-03T11:52:13Z",
      "side": 1,
      "message": "\u003e (My guess would be that the in-process cache was chosen because it it a simpler code change.)\n\nYup, that has been added above now.\n\nIn the long run we will likely take this approach.",
      "parentUuid": "93e036f3_5bafb64d",
      "range": {
        "startLine": 35,
        "startChar": 1,
        "endLine": 35,
        "endChar": 34
      },
      "revId": "092a0b0790c2319cede6c84d5091e13266746113",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6cfdf89_af104321",
        "filename": "docs/adr/0002-CacheAwarePropertyInfoStore-caching.md",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 5121
      },
      "writtenOn": "2018-12-20T12:17:31Z",
      "side": 1,
      "message": "Which steps are taken to ensure the new keys don\u0027t (all) wind up on the same instance?",
      "range": {
        "startLine": 37,
        "startChar": 17,
        "endLine": 37,
        "endChar": 37
      },
      "revId": "092a0b0790c2319cede6c84d5091e13266746113",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9fc193ec_14bc290a",
        "filename": "docs/adr/0002-CacheAwarePropertyInfoStore-caching.md",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 106
      },
      "writtenOn": "2018-12-20T12:23:32Z",
      "side": 1,
      "message": "So, there would be no actual steps in place to stop the keys from landing on the same host as the chance of that happening would be very low when talking about ~2000 keys.\nEven if 90% of the keys landed on the same host, the different access pattern (per key rather than all of the data) would mean we don\u0027t get the high read data traffic either.",
      "parentUuid": "e6cfdf89_af104321",
      "range": {
        "startLine": 37,
        "startChar": 17,
        "endLine": 37,
        "endChar": 37
      },
      "revId": "092a0b0790c2319cede6c84d5091e13266746113",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "227f9175_41f9dbe8",
        "filename": "docs/adr/0002-CacheAwarePropertyInfoStore-caching.md",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 4699
      },
      "writtenOn": "2018-12-23T22:18:19Z",
      "side": 1,
      "message": "Just to clarify – I infer from this that cache keys are randomly distributed across servers, based on something like the key’s hash, correct?",
      "parentUuid": "9fc193ec_14bc290a",
      "range": {
        "startLine": 37,
        "startChar": 17,
        "endLine": 37,
        "endChar": 37
      },
      "revId": "092a0b0790c2319cede6c84d5091e13266746113",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47d962e7_a2e1eea5",
        "filename": "docs/adr/0002-CacheAwarePropertyInfoStore-caching.md",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 50
      },
      "writtenOn": "2018-12-27T21:37:06Z",
      "side": 1,
      "message": "\u003e Just to clarify – I infer from this that cache keys are randomly distributed across servers, based on something like the key’s hash, correct?\n\nYes.",
      "parentUuid": "227f9175_41f9dbe8",
      "range": {
        "startLine": 37,
        "startChar": 17,
        "endLine": 37,
        "endChar": 37
      },
      "revId": "092a0b0790c2319cede6c84d5091e13266746113",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    }
  ]
}