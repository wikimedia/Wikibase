{
  "comments": [
    {
      "key": {
        "uuid": "0e6af365_ad4c49a0",
        "filename": "repo/includes/Search/Elastic/EntityFullTextQueryBuilder.php",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 2638
      },
      "writtenOn": "2017-09-27T08:37:57Z",
      "side": 1,
      "message": "Because we lack a generic query parser I think we still need to call $this-\u003edelegate-\u003ebuild and inspect the syntaxUsed array to see if there are any syntax we do not support in this builder.\nE.g. the query word1 NOT word2 should not run through this builder but the delegate if you don\u0027t support this syntax.",
      "revId": "563b072f7bbd52310e611da5f0e4050e1986456f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e6af365_5130c3fc",
        "filename": "repo/includes/Search/Elastic/EntityFullTextQueryBuilder.php",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 2096
      },
      "writtenOn": "2017-09-27T22:17:45Z",
      "side": 1,
      "message": "I think for now I\u0027d just segregate entity and generic queries, and ignore syntax for entity queries. Later we could revisit this (maybe even in this very patch) but I don\u0027t want to complicate the matters too early.",
      "parentUuid": "0e6af365_ad4c49a0",
      "revId": "563b072f7bbd52310e611da5f0e4050e1986456f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e6af365_8d3e25d6",
        "filename": "repo/includes/Search/Elastic/EntityFullTextQueryBuilder.php",
        "patchSetId": 1
      },
      "lineNbr": 113,
      "author": {
        "id": 2638
      },
      "writtenOn": "2017-09-27T08:37:57Z",
      "side": 1,
      "message": "I think we should separate constant score fields (untokenized) and normal match/multi_match fields (tokenized)\nHere the all field is tokenized and its score should matter.\n\nI\u0027d put scoring queries (alongside with future tokenized fields like descriptions) outside the dismax.\n\n- dismax\n  - const(labels.$lang)\n  - const(labels.$fallback)\n  - const(labels_all) // \u003c missing?\n  - const(title.keyword)\n- bool (should or perhaps dismax with a tiebreaker, still unclear to me)\n  - all\n  - all.plain\n  - description.$lang\n  - description.$fallback\n  - description_all (will we have a description_all?)",
      "revId": "563b072f7bbd52310e611da5f0e4050e1986456f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e6af365_91a95b24",
        "filename": "repo/includes/Search/Elastic/EntityFullTextQueryBuilder.php",
        "patchSetId": 1
      },
      "lineNbr": 113,
      "author": {
        "id": 2096
      },
      "writtenOn": "2017-09-27T22:15:29Z",
      "side": 1,
      "message": "Do we need labels_all if we already have all which includes labels? It\u0027s a last-resort match anyway, we do not expect it to be competing with specialized matches. \n\nAlso, I thought descriptions would go in the same place as labels? Why put them in different place?\n\nAlso, all seems to include descriptions, so should we have description_all at all?",
      "parentUuid": "0e6af365_8d3e25d6",
      "revId": "563b072f7bbd52310e611da5f0e4050e1986456f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e6af365_679ae5bf",
        "filename": "repo/includes/Search/Elastic/EntityFullTextQueryBuilder.php",
        "patchSetId": 1
      },
      "lineNbr": 113,
      "author": {
        "id": 2638
      },
      "writtenOn": "2017-09-28T07:48:17Z",
      "side": 1,
      "message": "I was talking only only about the scoring part of the query not the filter.\nI think the point is to separate keyword and tokenized fields.\n\nKeyword fields are constant scores and tokenized fields should use a classic match query.\nThe all field should include everything but a match to labels_all could be interesting for ranking, if none of the labels we query (user lang, fallbacks) match does a match on the label of another language is important? I don\u0027t know enough about the data we have but I feel it can be interesting and should be easy to add since we have it indexed now.\n\nFor description_all I think it\u0027s the same problem: will this provide better ranking?\n\nConcerning the filter I agree that we probably only need all+all.plain (and perhaps title.keyword if the entity ID is not included in all).\n\nIf I draft the full query (including the filter) it may look like this :\n\n- filter (filter part)\n  - bool should (min_should_match: 1)\n    - match(all)\n    - match(all.plain)\n    - match(title.keyword) (verify if needed)\n- should (scoring part)\n  - dismax\n    - const(labels.$lang)\n    - const(labels.$fallback)\n    - const(labels_all) // \u003c probably interesting\n    - const(title.keyword)\n  - bool (should clause or perhaps dismax with a tiebreaker, still unclear to me)\n    - all\n    - all.plain\n    - description.$lang\n    - description.$fallback\n    - description_all (needed?)\n\nThe problem related to the code here is that you mixup a tokenized field (all+all.plain) in the list of constant scores, imo it should go outside the dismax with a simple match or multi_match query.",
      "parentUuid": "0e6af365_91a95b24",
      "revId": "563b072f7bbd52310e611da5f0e4050e1986456f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e6af365_0df8f545",
        "filename": "repo/includes/Search/Elastic/EntityFullTextQueryBuilder.php",
        "patchSetId": 1
      },
      "lineNbr": 154,
      "author": {
        "id": 2638
      },
      "writtenOn": "2017-09-27T08:37:57Z",
      "side": 1,
      "message": "there are no reasons to run a special degraded query here.\nThis method is here to catch-up query_string syntax errors we failed to detect on our side that failed on elastic.\nSince here we do not send any query that can potentially fail on elastic if we enter this code it means that you\u0027ve built the query with your delegate and it\u0027s wise to use the delegate again in that case.",
      "revId": "563b072f7bbd52310e611da5f0e4050e1986456f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e6af365_71ace732",
        "filename": "repo/includes/Search/Elastic/EntityFullTextQueryBuilder.php",
        "patchSetId": 1
      },
      "lineNbr": 154,
      "author": {
        "id": 2096
      },
      "writtenOn": "2017-09-27T22:15:29Z",
      "side": 1,
      "message": "Makes sense. So then I just call delegate and be fine with it.",
      "parentUuid": "0e6af365_0df8f545",
      "revId": "563b072f7bbd52310e611da5f0e4050e1986456f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}