{
  "comments": [
    {
      "key": {
        "uuid": "74f1fb1d_4d7d1f48",
        "filename": "lib/includes/Store/Sql/Terms/DatabaseItemTermStore.php",
        "patchSetId": 2
      },
      "lineNbr": 108,
      "author": {
        "id": 6768
      },
      "writtenOn": "2019-06-04T10:41:09Z",
      "side": 1,
      "message": "Should we catch all exceptions here and not just DBError, to rollback in all cases?",
      "revId": "7d00348d23d67cfc7a94ff40439e513ddb99d153",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6551bf43_75441109",
        "filename": "lib/includes/Store/Sql/Terms/DatabaseItemTermStore.php",
        "patchSetId": 2
      },
      "lineNbr": 108,
      "author": {
        "id": 4699
      },
      "writtenOn": "2019-06-04T10:45:50Z",
      "side": 1,
      "message": "I’m not sure… I guess it would be safe to do, because we re-throw the exception at the end, even if it’s something totally unexpected.",
      "parentUuid": "74f1fb1d_4d7d1f48",
      "revId": "7d00348d23d67cfc7a94ff40439e513ddb99d153",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06ab2dcb_9b24d16d",
        "filename": "lib/includes/Store/Sql/Terms/DatabaseItemTermStore.php",
        "patchSetId": 2
      },
      "lineNbr": 108,
      "author": {
        "id": 16
      },
      "writtenOn": "2019-06-04T18:27:48Z",
      "side": 1,
      "message": "How does this work without getting errors from assertTransactionRoundStage() ?",
      "parentUuid": "6551bf43_75441109",
      "revId": "7d00348d23d67cfc7a94ff40439e513ddb99d153",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90fa8c58_b266f24a",
        "filename": "lib/includes/Store/Sql/Terms/DatabaseItemTermStore.php",
        "patchSetId": 2
      },
      "lineNbr": 108,
      "author": {
        "id": 4699
      },
      "writtenOn": "2019-06-05T10:43:32Z",
      "side": 1,
      "message": "I’m not sure what you mean. This code is based on https://www.mediawiki.org/wiki/Manual:Database_access#Lock_contention … looking at LoadBalancer.php, it looks like we might need finalizeMasterChanges() + approveMasterChanges(), but does that mean that the documentation is wrong?",
      "parentUuid": "06ab2dcb_9b24d16d",
      "revId": "7d00348d23d67cfc7a94ff40439e513ddb99d153",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1996261_8434bbe0",
        "filename": "lib/includes/Store/Sql/Terms/DatabaseItemTermStore.php",
        "patchSetId": 2
      },
      "lineNbr": 108,
      "author": {
        "id": 16
      },
      "writtenOn": "2019-06-05T10:47:05Z",
      "side": 1,
      "message": "The documentation was (or should be if it isn\u0027t) talking about LBFactory methods. Those can easily have their *MasterChanges() methods called. Individual Database instances can also have their begin/commit methods used *if* they where manually made via Database::factory(), which is rare. Other cases of transaction start/end methods, like those of LoadBalancer and LB-managed Database instances, are managed by LBFactory alone.",
      "parentUuid": "90fa8c58_b266f24a",
      "revId": "7d00348d23d67cfc7a94ff40439e513ddb99d153",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b16820b7_00ea9bb3",
        "filename": "lib/includes/Store/Sql/Terms/DatabaseItemTermStore.php",
        "patchSetId": 2
      },
      "lineNbr": 108,
      "author": {
        "id": 4699
      },
      "writtenOn": "2019-06-05T10:55:43Z",
      "side": 1,
      "message": "\u003e Other cases of transaction start/end methods, like those of LoadBalancer and LB-managed Database instances, are managed by LBFactory alone.\n\nOh, that’s good to know, thanks. Would be even better if it was clear from the documentation :/\n\nI’ll upload a follow-up patch to inject an ILBFactory instead, I guess.",
      "parentUuid": "c1996261_8434bbe0",
      "revId": "7d00348d23d67cfc7a94ff40439e513ddb99d153",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    }
  ]
}