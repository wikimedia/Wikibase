{
  "comments": [
    {
      "key": {
        "uuid": "ce637b91_8eb7fff1",
        "filename": "lib/includes/Changes/EntityDiffChangedAspects.php",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 128
      },
      "writtenOn": "2017-10-19T08:51:30Z",
      "side": 1,
      "message": "Can we start with 1, please?",
      "revId": "9fde95ce5cbcdc306d28cc3f4824dab0512c77c7",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce637b91_4ed2672e",
        "filename": "lib/includes/Changes/EntityDiffChangedAspects.php",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 128
      },
      "writtenOn": "2017-10-19T08:51:30Z",
      "side": 1,
      "message": "How do you distinguish addition from removal from update? That\u0027s an important distinction for the affected client. Perhaps this should be an int or a single character, not a bool.",
      "revId": "9fde95ce5cbcdc306d28cc3f4824dab0512c77c7",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce637b91_4e8587b0",
        "filename": "lib/includes/Changes/EntityDiffChangedAspects.php",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 50
      },
      "writtenOn": "2017-10-19T09:27:14Z",
      "side": 1,
      "message": "Maybe use integer flags defined as constants?\n\nself::SITELINK_ADDITION\nself::SITELINK_REMOVAL\nself::SITELINK_CHANGE\nself::SITELINK_BADGE_CHANGE\n\nBut this wont be enough for SiteLinkCommentCreator, it needs the actual old and new value. For that case I planed to keep the SiteLinkDiff (but only that) in ItemChange. What do you think?",
      "parentUuid": "ce637b91_4ed2672e",
      "revId": "9fde95ce5cbcdc306d28cc3f4824dab0512c77c7",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e5d03d5_cfec1529",
        "filename": "lib/includes/Changes/EntityDiffChangedAspects.php",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 128
      },
      "writtenOn": "2017-10-25T10:22:00Z",
      "side": 1,
      "message": "Yes, int sound good.\n\nKeeping SiteLinkDiff when needed sounds ok, but I\u0027m not sure in *which* case you want to keep the SiteLinkDiff. SiteLinkCommentCreator is used for all SiteLink changs, no? And which SiteLink change counts as linuk/unlink depends on the client...\n\nI was wondering whether we can move the logic from SiteLinkCommentCreator:getSiteLinkAddRemoveParams() here. But  the information is client-specific. I suppose we could compose client-specific diffs, but I\u0027m not sure it\u0027s a good idea.",
      "parentUuid": "ce637b91_4e8587b0",
      "revId": "9fde95ce5cbcdc306d28cc3f4824dab0512c77c7",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e5d03d5_3ba64ba8",
        "filename": "lib/includes/Changes/EntityDiffChangedAspects.php",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 50
      },
      "writtenOn": "2017-10-25T19:53:23Z",
      "side": 1,
      "message": "Well, if we use a well documented format for this, like said above (int constant keys), SiteLinkCommentCreator could work from this alone. No need for this to be client specific.",
      "parentUuid": "8e5d03d5_cfec1529",
      "revId": "9fde95ce5cbcdc306d28cc3f4824dab0512c77c7",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e5d03d5_dcbccad7",
        "filename": "lib/includes/Changes/EntityDiffChangedAspects.php",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1453
      },
      "writtenOn": "2017-10-26T15:12:27Z",
      "side": 1,
      "message": "I suggest this structure:\n\n$siteLinkChanges \u003d [\n\t\u0027enwiki\u0027 \u003d\u003e [ \u0027A\u0027, \u0027B\u0027, false ], //linked page changed\n\t\u0027enwiki\u0027 \u003d\u003e [ \u0027A\u0027, \u0027A\u0027, true ], //only the badges changed\n\t\u0027enwiki\u0027 \u003d\u003e [ null, \u0027A\u0027, … ], //new sitelink added\n\t\u0027enwiki\u0027 \u003d\u003e [ \u0027A\u0027, null, … ], //sitelink removed\n];",
      "parentUuid": "8e5d03d5_3ba64ba8",
      "revId": "9fde95ce5cbcdc306d28cc3f4824dab0512c77c7",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce637b91_aebc43d6",
        "filename": "lib/includes/Changes/EntityDiffChangedAspects.php",
        "patchSetId": 3
      },
      "lineNbr": 55,
      "author": {
        "id": 128
      },
      "writtenOn": "2017-10-19T08:51:30Z",
      "side": 1,
      "message": "aliases, for example",
      "revId": "9fde95ce5cbcdc306d28cc3f4824dab0512c77c7",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce637b91_6ecf2b83",
        "filename": "lib/includes/Changes/EntityDiffChangedAspects.php",
        "patchSetId": 3
      },
      "lineNbr": 174,
      "author": {
        "id": 128
      },
      "writtenOn": "2017-10-19T08:51:30Z",
      "side": 1,
      "message": "If we are worried about compactness, use shorter keys. Should be ok if this is purely an internal structure. Apropos: it should somewhere say what kind of stability guarantees we give for this structure, and what needs to be considered when bumping the version.",
      "revId": "9fde95ce5cbcdc306d28cc3f4824dab0512c77c7",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e5d03d5_3cccfe8b",
        "filename": "lib/includes/Changes/EntityDiffChangedAspects.php",
        "patchSetId": 3
      },
      "lineNbr": 174,
      "author": {
        "id": 1453
      },
      "writtenOn": "2017-10-26T15:12:27Z",
      "side": 1,
      "message": "Please stick to the long, descriptive names. These are not that many characters. The bulk is not in these keys, but in the values (100 labels, 100 statements and such).\n\nJust an idea for a future improvement: Skip array keys that contain empty arrays anyway.",
      "parentUuid": "ce637b91_6ecf2b83",
      "revId": "9fde95ce5cbcdc306d28cc3f4824dab0512c77c7",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce637b91_eea9db8e",
        "filename": "lib/includes/Changes/EntityDiffChangedAspectsFactory.php",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 128
      },
      "writtenOn": "2017-10-19T08:51:30Z",
      "side": 1,
      "message": "why not require an EntityDiff here? The name suggests that it has to be one.",
      "revId": "9fde95ce5cbcdc306d28cc3f4824dab0512c77c7",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e5d03d5_fca426b7",
        "filename": "lib/includes/Changes/EntityDiffChangedAspectsFactory.php",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1453
      },
      "writtenOn": "2017-10-26T15:12:27Z",
      "side": 1,
      "message": "I had the same idea, but this is not possible here.",
      "parentUuid": "ce637b91_eea9db8e",
      "revId": "9fde95ce5cbcdc306d28cc3f4824dab0512c77c7",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce637b91_0ecc6f8b",
        "filename": "lib/includes/Changes/EntityDiffChangedAspectsFactory.php",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 128
      },
      "writtenOn": "2017-10-19T08:51:30Z",
      "side": 1,
      "message": "This is redundant to the check above\n$entityDiff-\u003egetSiteLinkDiff()-\u003eisEmpty()",
      "revId": "9fde95ce5cbcdc306d28cc3f4824dab0512c77c7",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce637b91_cea417b8",
        "filename": "lib/includes/Changes/EntityDiffChangedAspectsFactory.php",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 128
      },
      "writtenOn": "2017-10-19T08:51:30Z",
      "side": 1,
      "message": "EntityDiff could be required in the param list.\n\nThough EntityDiff should actually not know anything about labels, descriptions, or claims. We should have separate interfaces for these... Oh, well.",
      "revId": "9fde95ce5cbcdc306d28cc3f4824dab0512c77c7",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e6af365_52eb6f77",
        "filename": "lib/includes/Changes/EntityDiffChangedAspectsFactory.php",
        "patchSetId": 3
      },
      "lineNbr": 117,
      "author": {
        "id": 1453
      },
      "writtenOn": "2017-10-16T13:50:21Z",
      "side": 1,
      "message": "The two methods are duplicated and can be merged into a \"getChangedTerms\". But all this is private and can be refactored any time.",
      "range": {
        "startLine": 117,
        "startChar": 18,
        "endLine": 117,
        "endChar": 40
      },
      "revId": "9fde95ce5cbcdc306d28cc3f4824dab0512c77c7",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce637b91_0ea30faa",
        "filename": "lib/includes/Changes/EntityDiffChangedAspectsFactory.php",
        "patchSetId": 3
      },
      "lineNbr": 117,
      "author": {
        "id": 128
      },
      "writtenOn": "2017-10-19T08:51:30Z",
      "side": 1,
      "message": "That method could actually be called getDiffKeys().\nBut I like the more specific methods better. The overhead is minimal.",
      "parentUuid": "0e6af365_52eb6f77",
      "range": {
        "startLine": 117,
        "startChar": 18,
        "endLine": 117,
        "endChar": 40
      },
      "revId": "9fde95ce5cbcdc306d28cc3f4824dab0512c77c7",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e6af365_f28143a5",
        "filename": "lib/tests/phpunit/Changes/EntityDiffChangedAspectsTest.php",
        "patchSetId": 3
      },
      "lineNbr": 182,
      "author": {
        "id": 1453
      },
      "writtenOn": "2017-10-16T13:50:21Z",
      "side": 1,
      "message": "This is a bit to heavy, in my opinion. I think just one bad serialization would have been enough.",
      "range": {
        "startLine": 180,
        "startChar": 43,
        "endLine": 182,
        "endChar": 55
      },
      "revId": "9fde95ce5cbcdc306d28cc3f4824dab0512c77c7",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce637b91_eec23b5d",
        "filename": "lib/tests/phpunit/Changes/EntityDiffChangedAspectsTest.php",
        "patchSetId": 3
      },
      "lineNbr": 182,
      "author": {
        "id": 128
      },
      "writtenOn": "2017-10-19T08:51:30Z",
      "side": 1,
      "message": "hm? what do you mean?",
      "parentUuid": "0e6af365_f28143a5",
      "range": {
        "startLine": 180,
        "startChar": 43,
        "endLine": 182,
        "endChar": 55
      },
      "revId": "9fde95ce5cbcdc306d28cc3f4824dab0512c77c7",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}