{
  "comments": [
    {
      "key": {
        "uuid": "DrF8PZzg",
        "filename": "DataModel/DataModel/Claim/ClaimListAccess.php",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 44
      },
      "writtenOn": "2013-03-31T02:36:08Z",
      "side": 1,
      "message": "Please do not bloat this interface. It is not a bin to throw every possible access method on a list of claims into.",
      "revId": "46db1dd4ebf8a64d3582a2548031b3c7795cd990",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "DrCpSZ94",
        "filename": "DataModel/DataModel/Claim/ClaimListAccess.php",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 128
      },
      "writtenOn": "2013-03-31T13:35:56Z",
      "side": 1,
      "message": "Not every possible access method, just every access method useful in our context. \n\nIn principle, I agree that it clutters the interface - why should we force every implementing class to implement that functionality? But then - why is this an interface at all, it\u0027s a simple data object, right?\n\nAnyway. Where would you put functions for generating projections like the blow? Into a ClaimListAccessProjectionGenerator, which you get from a ClaimListAccessProjectionGeneratorFactory? That sounds Javaesque...",
      "parentUuid": "DrF8PZzg",
      "revId": "46db1dd4ebf8a64d3582a2548031b3c7795cd990",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "DrIVajEw",
        "filename": "DataModel/DataModel/Claim/ClaimListAccess.php",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 44
      },
      "writtenOn": "2013-03-31T19:29:42Z",
      "side": 1,
      "message": "\u003e But then - why is this an interface at all, it\u0027s a simple data object, right?\n\nIf you have a use case where it makes no sense to use this interface, then why are you adding things to the interface?\n\n\u003e Where would you put functions for generating projections like the blow?\n\nThat is a question you apparently need to answer in order to complete whatever you are doing, though it seems to have little to do with my interface bloat concern.\n\n\u003e Into a ClaimListAccessProjectionGenerator, which you get from a ClaimListAccessProjectionGeneratorFactory? That sounds Javaesque..\n\nPerhaps you can find a better name on classnamer.com?",
      "parentUuid": "DrCpSZ94",
      "revId": "46db1dd4ebf8a64d3582a2548031b3c7795cd990",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "DrGUPMDk",
        "filename": "DataModel/DataModel/Claim/ClaimListAccess.php",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 128
      },
      "writtenOn": "2013-03-31T19:48:11Z",
      "side": 1,
      "message": "classnamer.com sais: BasicLolcatGenerator. Don\u0027t blame me!\n\nAnyway, the obvious alternative place to put this functionality would be the Entity class. Which, of course, is indeed a bucket of everything related to Entitites.",
      "parentUuid": "DrIVajEw",
      "revId": "46db1dd4ebf8a64d3582a2548031b3c7795cd990",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "DrDAa2G0",
        "filename": "DataModel/DataModel/Claim/ClaimListAccess.php",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 44
      },
      "writtenOn": "2013-03-31T20:19:37Z",
      "side": 1,
      "message": "I have no big objection to you adding in these methods to Claims. That would be better then adding them to Entity. What I am objecting against is you adding them in this interface.",
      "parentUuid": "DrGUPMDk",
      "revId": "46db1dd4ebf8a64d3582a2548031b3c7795cd990",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "Dt6iwooo",
        "filename": "DataModel/DataModel/Claim/ClaimListAccess.php",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 128
      },
      "writtenOn": "2013-04-10T16:04:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "DrDAa2G0",
      "revId": "46db1dd4ebf8a64d3582a2548031b3c7795cd990",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "DrH8Mo0I",
        "filename": "DataModel/DataModel/Claim/Claims.php",
        "patchSetId": 1
      },
      "lineNbr": 176,
      "author": {
        "id": 44
      },
      "writtenOn": "2013-03-31T02:36:08Z",
      "side": 1,
      "message": "This is inconsistent with the interface definition. Accepting both forms is also not something I think this method should do - since it means this method is doing different tasks. Looks like you can require an int here.",
      "revId": "46db1dd4ebf8a64d3582a2548031b3c7795cd990",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "DrEpPozU",
        "filename": "DataModel/DataModel/Claim/Claims.php",
        "patchSetId": 1
      },
      "lineNbr": 176,
      "author": {
        "id": 128
      },
      "writtenOn": "2013-03-31T13:35:56Z",
      "side": 1,
      "message": "Yes, an int would work, and the implementation would be cleaner.\n\nOn the other hand: it would expose the fact that we use numbers as IDs. I very much like the idea of opaque identifiers that could be changed to be represented in an entirely different way. Which is why I\u0027d prefer to use EntityId consistently, everywhere.",
      "parentUuid": "DrH8Mo0I",
      "revId": "46db1dd4ebf8a64d3582a2548031b3c7795cd990",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "DrCVX.CY",
        "filename": "DataModel/DataModel/Claim/Claims.php",
        "patchSetId": 1
      },
      "lineNbr": 176,
      "author": {
        "id": 44
      },
      "writtenOn": "2013-03-31T19:29:42Z",
      "side": 1,
      "message": "Well, make up your mind then and pick one. Not specifying the interface properly and accenting multiple formats is just plain bad",
      "parentUuid": "DrEpPozU",
      "revId": "46db1dd4ebf8a64d3582a2548031b3c7795cd990",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "DrIUMzEM",
        "filename": "DataModel/DataModel/Claim/Claims.php",
        "patchSetId": 1
      },
      "lineNbr": 176,
      "author": {
        "id": 128
      },
      "writtenOn": "2013-03-31T19:48:11Z",
      "side": 1,
      "message": "Actually, it\u0027s just PHP\u0027s lack of support for overloading that makes this icky. Specifying multiple signature for the same function to support this kind of thing is wide spread and considered good practice in other languages. \n\nSo, I don\u0027t think it\u0027s bad in principle. There\u0027s just no very nice way to do it in PHP. Which is a reason not to do it, I suppose.",
      "parentUuid": "DrCVX.CY",
      "revId": "46db1dd4ebf8a64d3582a2548031b3c7795cd990",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "DrFAXVEQ",
        "filename": "DataModel/DataModel/Claim/Claims.php",
        "patchSetId": 1
      },
      "lineNbr": 176,
      "author": {
        "id": 44
      },
      "writtenOn": "2013-03-31T20:19:37Z",
      "side": 1,
      "message": "As a PHP dev you need to write proper PHP code. Hiding behind features the language lacks is not very constructive. In this case, the lack of support for overloading in no way mitigates the problems you are creating.\n\nIf you have overloading, you have multiple methods. This is one method, not multiple. If you want to do something like overloading, you can always use two methods with a meaningful difference in the name. In this particular case it seems to me you can just pick one form and stick with it. The caller can always convert.",
      "parentUuid": "DrIUMzEM",
      "revId": "46db1dd4ebf8a64d3582a2548031b3c7795cd990",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "DrD8GKyM",
        "filename": "DataModel/DataModel/Claim/Claims.php",
        "patchSetId": 1
      },
      "lineNbr": 197,
      "author": {
        "id": 44
      },
      "writtenOn": "2013-03-31T02:36:08Z",
      "side": 1,
      "message": "You might be able to use ByPropertyidArray instead of this new code",
      "revId": "46db1dd4ebf8a64d3582a2548031b3c7795cd990",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "DrOpcb.8",
        "filename": "DataModel/DataModel/Claim/Claims.php",
        "patchSetId": 1
      },
      "lineNbr": 197,
      "author": {
        "id": 128
      },
      "writtenOn": "2013-03-31T13:35:56Z",
      "side": 1,
      "message": "Ah, will have a look at that.",
      "parentUuid": "DrD8GKyM",
      "revId": "46db1dd4ebf8a64d3582a2548031b3c7795cd990",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "Dt2iquhs",
        "filename": "DataModel/DataModel/Claim/Claims.php",
        "patchSetId": 1
      },
      "lineNbr": 197,
      "author": {
        "id": 128
      },
      "writtenOn": "2013-04-10T16:04:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "DrD8GKyM",
      "revId": "46db1dd4ebf8a64d3582a2548031b3c7795cd990",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "DrB8J7zE",
        "filename": "DataModel/DataModel/Claim/Claims.php",
        "patchSetId": 1
      },
      "lineNbr": 204,
      "author": {
        "id": 44
      },
      "writtenOn": "2013-03-31T02:36:08Z",
      "side": 1,
      "message": "I suggest returning this as a list of Snak. If some user wants to use SnakList for access, they can always construct one.",
      "revId": "46db1dd4ebf8a64d3582a2548031b3c7795cd990",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "DrApiC7E",
        "filename": "DataModel/DataModel/Claim/Claims.php",
        "patchSetId": 1
      },
      "lineNbr": 204,
      "author": {
        "id": 128
      },
      "writtenOn": "2013-03-31T13:35:56Z",
      "side": 1,
      "message": "can do.",
      "parentUuid": "DrB8J7zE",
      "revId": "46db1dd4ebf8a64d3582a2548031b3c7795cd990",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "Dt0itfjA",
        "filename": "DataModel/DataModel/Claim/Claims.php",
        "patchSetId": 1
      },
      "lineNbr": 204,
      "author": {
        "id": 128
      },
      "writtenOn": "2013-04-10T16:04:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "DrB8J7zE",
      "revId": "46db1dd4ebf8a64d3582a2548031b3c7795cd990",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "DrEV7FLw",
        "filename": "DataModel/tests/phpunit/Claim/ClaimsTest.php",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 44
      },
      "writtenOn": "2013-03-31T19:29:42Z",
      "side": 1,
      "message": "assertSameSize",
      "revId": "46db1dd4ebf8a64d3582a2548031b3c7795cd990",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "Dt.i9SmM",
        "filename": "DataModel/tests/phpunit/Claim/ClaimsTest.php",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 128
      },
      "writtenOn": "2013-04-10T16:04:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "DrEV7FLw",
      "revId": "46db1dd4ebf8a64d3582a2548031b3c7795cd990",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "DrOVIII4",
        "filename": "DataModel/tests/phpunit/Claim/ClaimsTest.php",
        "patchSetId": 1
      },
      "lineNbr": 164,
      "author": {
        "id": 44
      },
      "writtenOn": "2013-03-31T19:29:42Z",
      "side": 1,
      "message": "assertSize",
      "revId": "46db1dd4ebf8a64d3582a2548031b3c7795cd990",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "Dt4izZpc",
        "filename": "DataModel/tests/phpunit/Claim/ClaimsTest.php",
        "patchSetId": 1
      },
      "lineNbr": 164,
      "author": {
        "id": 128
      },
      "writtenOn": "2013-04-10T16:04:41Z",
      "side": 1,
      "message": "doesn\u0027t seem to exist",
      "parentUuid": "DrOVIII4",
      "revId": "46db1dd4ebf8a64d3582a2548031b3c7795cd990",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "Dt8OhUfw",
        "filename": "DataModel/tests/phpunit/Claim/ClaimsTest.php",
        "patchSetId": 1
      },
      "lineNbr": 164,
      "author": {
        "id": 44
      },
      "writtenOn": "2013-04-10T16:19:56Z",
      "side": 1,
      "message": "assertCount",
      "parentUuid": "Dt4izZpc",
      "revId": "46db1dd4ebf8a64d3582a2548031b3c7795cd990",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "DtwMy.Q8",
        "filename": "DataModel/tests/phpunit/Claim/ClaimsTest.php",
        "patchSetId": 1
      },
      "lineNbr": 164,
      "author": {
        "id": 128
      },
      "writtenOn": "2013-04-10T19:16:44Z",
      "side": 1,
      "message": "ah! will do that in a follow-up once all this is merged, i don\u0027t want to rebase everything again just now...",
      "parentUuid": "Dt8OhUfw",
      "revId": "46db1dd4ebf8a64d3582a2548031b3c7795cd990",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}