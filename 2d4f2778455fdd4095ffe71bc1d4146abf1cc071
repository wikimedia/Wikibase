{
  "comments": [
    {
      "key": {
        "uuid": "22fbe5cd_820f7d4e",
        "filename": "lib/includes/Reporting/ReportingExceptionHandler.php",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 4699
      },
      "writtenOn": "2019-06-11T11:17:35Z",
      "side": 1,
      "message": "As an optimization, you could apply array_flip() here and then use array_key_exists() or isset() below. But I guess if we only ignore a single message in practice, that doesn’t really matter.",
      "revId": "2d4f2778455fdd4095ffe71bc1d4146abf1cc071",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75de9f00_247e1220",
        "filename": "repo/maintenance/DumpEntities.php",
        "patchSetId": 1
      },
      "lineNbr": 201,
      "author": {
        "id": 4699
      },
      "writtenOn": "2019-06-11T11:17:35Z",
      "side": 1,
      "message": "It’s unfortunate that we can’t (currently) distinguish between failed-to-dump due to missing entity and failed-to-dump due to any other error :/",
      "range": {
        "startLine": 201,
        "startChar": 54,
        "endLine": 201,
        "endChar": 70
      },
      "revId": "2d4f2778455fdd4095ffe71bc1d4146abf1cc071",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67f48151_4f5a0104",
        "filename": "repo/maintenance/DumpEntities.php",
        "patchSetId": 1
      },
      "lineNbr": 201,
      "author": {
        "id": 6
      },
      "writtenOn": "2019-06-11T11:37:21Z",
      "side": 1,
      "message": "Ah, I assumed that capability exists. Can we not add it before this goes live?",
      "parentUuid": "75de9f00_247e1220",
      "range": {
        "startLine": 201,
        "startChar": 54,
        "endLine": 201,
        "endChar": 70
      },
      "revId": "2d4f2778455fdd4095ffe71bc1d4146abf1cc071",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c4f1b34_87fc0179",
        "filename": "repo/maintenance/DumpEntities.php",
        "patchSetId": 1
      },
      "lineNbr": 201,
      "author": {
        "id": 4699
      },
      "writtenOn": "2019-06-11T14:47:28Z",
      "side": 1,
      "message": "DumpGenerator already catches EntityLookupException, StorageException and LogicException separately, so I assume it should be possible to adjust the error code in each case. Nothing else seems to rely on those codes yet – at least, nothing I can find with MediaWiki code search.\n\nBut I just checked, and an EntityLookup is supposed to return null when an entity does not exist, and as far as I can tell DumpGenerator continues silently in that case… Stas, what kind of error are you getting?",
      "parentUuid": "67f48151_4f5a0104",
      "range": {
        "startLine": 201,
        "startChar": 54,
        "endLine": 201,
        "endChar": 70
      },
      "revId": "2d4f2778455fdd4095ffe71bc1d4146abf1cc071",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee52d02d_09f84e52",
        "filename": "repo/maintenance/DumpEntities.php",
        "patchSetId": 1
      },
      "lineNbr": 201,
      "author": {
        "id": 2096
      },
      "writtenOn": "2019-06-11T17:40:08Z",
      "side": 1,
      "message": "Lots of messages like:\n\n[failed-to-dump]: Failed to dump M10565 (Entity not found: M10565)\n[failed-to-dump]: Failed to dump M10578 (Entity not found: M10578)\n[failed-to-dump]: Failed to dump M10579 (Entity not found: M10579)\n\nTry running php extensions/Wikibase/repo/maintenance/dumpRdf.php --entity-type mediainfo --limit 10 on federated-commons machine to reproduce.",
      "parentUuid": "3c4f1b34_87fc0179",
      "range": {
        "startLine": 201,
        "startChar": 54,
        "endLine": 201,
        "endChar": 70
      },
      "revId": "2d4f2778455fdd4095ffe71bc1d4146abf1cc071",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "031bc5be_b81c4ae0",
        "filename": "repo/maintenance/DumpEntities.php",
        "patchSetId": 1
      },
      "lineNbr": 201,
      "author": {
        "id": 2096
      },
      "writtenOn": "2019-06-11T17:41:20Z",
      "side": 1,
      "message": "It\u0027s definitely should be possible to use different error codes for different exceptions. It\u0027s not what happens now but I don\u0027t see a reason why it can\u0027t be done.",
      "parentUuid": "ee52d02d_09f84e52",
      "range": {
        "startLine": 201,
        "startChar": 54,
        "endLine": 201,
        "endChar": 70
      },
      "revId": "2d4f2778455fdd4095ffe71bc1d4146abf1cc071",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c21cf0c9_d50a3379",
        "filename": "repo/maintenance/DumpEntities.php",
        "patchSetId": 1
      },
      "lineNbr": 201,
      "author": {
        "id": 4699
      },
      "writtenOn": "2019-06-12T17:00:53Z",
      "side": 1,
      "message": "Okay, it looks like RdfDumpGenerator and JsonDumpGenerator raise that EntityLookupException when the Entity(Revision)Lookup return null.\n\n\u003e It’s unfortunate that we can’t (currently) distinguish between failed-to-dump due to missing entity and failed-to-dump due to any other error :/\n\nI think this isn’t actually true – you’d just have to adjust the ReportingExceptionHandler to filter based on the type of $exception instead of on the $errorCode. Then you can check if it’s a subclass of EntityLookupException (ignore) or not.",
      "parentUuid": "031bc5be_b81c4ae0",
      "range": {
        "startLine": 201,
        "startChar": 54,
        "endLine": 201,
        "endChar": 70
      },
      "revId": "2d4f2778455fdd4095ffe71bc1d4146abf1cc071",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    }
  ]
}