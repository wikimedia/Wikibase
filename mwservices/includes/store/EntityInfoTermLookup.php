<?php

namespace Wikibase\Lib\Store;

use OutOfBoundsException;
use Wikibase\DataModel\Entity\EntityId;

/**
 * TermLookup based on plain array data structures.
 * This allows term lookups to be performed directly on prefetched data,
 * such as the data structured generated by EntityInfoBuilder.
 *
 * @see EntityInfoBuilder
 *
 * @since 0.5
 *
 * @licence GNU GPL v2+
 * @author Daniel Kinzler
 */
class EntityInfoTermLookup implements TermLookup {

	/**
	 * @var EntityInfo
	 */
	private $entityInfo;

	/**
	 * @param EntityInfo $entityInfo
	 */
	public function __construct( EntityInfo $entityInfo ) {
		$this->entityInfo = $entityInfo;
	}

	/**
	 * Gets the label of an Entity with the specified EntityId and language code.
	 *
	 * @param EntityId $entityId
	 * @param string $languageCode
	 *
	 * @throws OutOfBoundsException if no label in that language is known
	 * @return string
	 */
	public function getLabel( EntityId $entityId, $languageCode ) {
		$label = $this->entityInfo->getLabel( $entityId, $languageCode );

		if ( $label === null ) {
			throw new OutOfBoundsException( "No label found for language '$languageCode'" );
		}

		return $label;
	}

	/**
	 * Gets all labels of an Entity with the specified EntityId.
	 *
	 * @param EntityId $entityId
	 * @param string[]|null $languages
	 *
	 * @throws OutOfBoundsException
	 * @return string[]
	 */
	public function getLabels( EntityId $entityId, array $languages = null ) {
		return $this->entityInfo->getLabels( $entityId, $languages );
	}

	/**
	 * Gets the description of an Entity with the specified EntityId and language code.
	 *
	 * @param EntityId $entityId
	 * @param string $languageCode
	 *
	 * @throws OutOfBoundsException if no description in that language is known
	 * @return string
	 */
	public function getDescription( EntityId $entityId, $languageCode ) {
		$description = $this->entityInfo->getDescription( $entityId, $languageCode );

		if ( $description === null ) {
			throw new OutOfBoundsException( "No description found for language '$languageCode'" );
		}

		return $description;
	}

	/**
	 * Gets all descriptions of an Entity with the specified EntityId.
	 *
	 * @param EntityId $entityId
	 * @param string[]|null $languages
	 *
	 * @throws OutOfBoundsException
	 * @return string[]
	 */
	public function getDescriptions( EntityId $entityId, array $languages = null ) {
		return $this->entityInfo->getDescriptions( $entityId, $languages );
	}

}
