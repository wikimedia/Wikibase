{
  "comments": [
    {
      "key": {
        "uuid": "6e7c4fa4_6b935c5b",
        "filename": "repo/includes/rdf/RdfBuilder.php",
        "patchSetId": 15
      },
      "lineNbr": 472,
      "author": {
        "id": 44
      },
      "writtenOn": "2015-02-22T01:05:55Z",
      "side": 1,
      "message": "the body here could be in a $this-\u003eaddStatementQualifiers()",
      "revId": "0492edd71c7161257e1485add855544e5edef53d",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e7c4fa4_0b84280e",
        "filename": "repo/includes/rdf/RdfBuilder.php",
        "patchSetId": 15
      },
      "lineNbr": 480,
      "author": {
        "id": 44
      },
      "writtenOn": "2015-02-22T01:05:55Z",
      "side": 1,
      "message": "addStatementReferences",
      "revId": "0492edd71c7161257e1485add855544e5edef53d",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e7c4fa4_cb8150fe",
        "filename": "repo/includes/rdf/RdfBuilder.php",
        "patchSetId": 15
      },
      "lineNbr": 499,
      "author": {
        "id": 44
      },
      "writtenOn": "2015-02-22T01:05:55Z",
      "side": 1,
      "message": "$isTruthy",
      "revId": "0492edd71c7161257e1485add855544e5edef53d",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e7c4fa4_eb7e8c13",
        "filename": "repo/includes/rdf/RdfBuilder.php",
        "patchSetId": 15
      },
      "lineNbr": 505,
      "author": {
        "id": 44
      },
      "writtenOn": "2015-02-22T01:05:55Z",
      "side": 1,
      "message": "true )",
      "revId": "0492edd71c7161257e1485add855544e5edef53d",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e7c4fa4_8b77d835",
        "filename": "repo/includes/rdf/RdfBuilder.php",
        "patchSetId": 15
      },
      "lineNbr": 506,
      "author": {
        "id": 44
      },
      "writtenOn": "2015-02-22T01:05:55Z",
      "side": 1,
      "message": "The body of this else could also go into its own method",
      "revId": "0492edd71c7161257e1485add855544e5edef53d",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e7c4fa4_4b8d402d",
        "filename": "repo/includes/rdf/RdfBuilder.php",
        "patchSetId": 15
      },
      "lineNbr": 646,
      "author": {
        "id": 44
      },
      "writtenOn": "2015-02-22T01:05:55Z",
      "side": 1,
      "message": "This seems to be unused. In any case, this is a OCP violation.\n\nhttps://en.wikipedia.org/wiki/Open/closed_principle\n\nWhat you probably want to do here is to employ something akin to the Strategy Pattern\n\nhttps://en.wikipedia.org/wiki/Strategy_pattern\n\nYou can have a DataValueRdfSerializer (I did not look at the context here too much, so the name might be bad) interface, with\n\n* void addValue()\n* bool canAddValue()\n\nThen you can have a service that gets an array of implementations, and loops over them to determine which one to use. This RdfBuilder then simply needs this service.\n\nThat will also help cut down the size and responsibility of this class.",
      "revId": "0492edd71c7161257e1485add855544e5edef53d",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e7c4fa4_172bea78",
        "filename": "repo/includes/rdf/RdfBuilder.php",
        "patchSetId": 15
      },
      "lineNbr": 646,
      "author": {
        "id": 128
      },
      "writtenOn": "2015-02-23T11:38:18Z",
      "side": 1,
      "message": "I agree that we want to use a registry for (sub)graph builders for DataValues (I woulnd\u0027t call thouse \"serializers\" though, that would be very misleading; They correspond to RdfBuilder, not RdfSerializer). \n\nI would also like using the strategy pattern for truthy mode, but the different output modes are nut mutually exclusive, so it\u0027s not trivial.\n\nThat being said: I think factoring out the handing for the different value types  (or data types) can be split out in a follow-up. Adding them here is find for now. Get gets us moving forward without being blocked on refactoring, and allows us to explore which abstractions we actually need.",
      "parentUuid": "6e7c4fa4_4b8d402d",
      "revId": "0492edd71c7161257e1485add855544e5edef53d",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}