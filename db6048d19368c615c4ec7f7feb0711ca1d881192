{
  "comments": [
    {
      "key": {
        "uuid": "77e6af70_551f4626",
        "filename": "lib/includes/Store/Sql/PropertyTermStoreWriter.php",
        "patchSetId": 3
      },
      "lineNbr": 19,
      "author": {
        "id": 44
      },
      "writtenOn": "2019-03-29T21:08:53Z",
      "side": 1,
      "message": "DBAccessBase: not keen on code reuse via inheritance, esp from a framework class.",
      "revId": "db6048d19368c615c4ec7f7feb0711ca1d881192",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a37446c6_cdb52fba",
        "filename": "lib/includes/Store/Sql/PropertyTermStoreWriter.php",
        "patchSetId": 3
      },
      "lineNbr": 19,
      "author": {
        "id": 6768
      },
      "writtenOn": "2019-04-01T19:58:02Z",
      "side": 1,
      "message": "yeap me neither .. I\u0027m just starting with the old one (TermSqlIndex thing) and move there bit by bit",
      "parentUuid": "77e6af70_551f4626",
      "revId": "db6048d19368c615c4ec7f7feb0711ca1d881192",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14bc9440_c9c792ed",
        "filename": "lib/includes/Store/Sql/PropertyTermStoreWriter.php",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 44
      },
      "writtenOn": "2019-03-29T21:08:53Z",
      "side": 1,
      "message": "If we really have to create an implementation of EntityTermStoreWriter then I think it would be good to have it just be a facade. That way PropertyTermStoreWriter, or whatever it gets called, does not need to deal with getting something of type EntityDocument.",
      "revId": "db6048d19368c615c4ec7f7feb0711ca1d881192",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05ebf7db_22efa100",
        "filename": "lib/includes/Store/Sql/PropertyTermStoreWriter.php",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 6768
      },
      "writtenOn": "2019-04-01T19:58:02Z",
      "side": 1,
      "message": "I didn\u0027t think of that interface as being the facade\u0027s interface.. nor anyone else when we were discussing it.\n\nA facade will later combine the few different methods we have around writing, reading and clearing terms for different entities. so I would expect to have a few methods for the different cases, such as `savePropertyTerms(Property $p)` `saveItemTerms(Item $i)` `getPropertyTerms(PropertyId $pid)` `getItemTerms(ItemId $iid)` and so on.",
      "parentUuid": "14bc9440_c9c792ed",
      "revId": "db6048d19368c615c4ec7f7feb0711ca1d881192",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35e2e20d_65df29d8",
        "filename": "lib/includes/Store/Sql/PropertyTermStoreWriter.php",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 44
      },
      "writtenOn": "2019-04-01T20:06:00Z",
      "side": 1,
      "message": "We have 3 cases:\n\n* term stuff for (an) item(s)\n* term stuff for (an) propertie(s)\n* term stuff for (an) entity(s)\n\nHence in my mind at least these interfaces:\n\n* item\n* property (where our current implementation work goes)\n* entity (facade implementation)\n\nHaving a facade with both item and property specific methods makes little sense to me. The whole reason we\u0027d have a facade is to deal with code that gives you something of type Entity. If we don\u0027t have any code like that then there is no reason for the facade.",
      "parentUuid": "05ebf7db_22efa100",
      "revId": "db6048d19368c615c4ec7f7feb0711ca1d881192",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    }
  ]
}